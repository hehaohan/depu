VideoPoker = function() {
    VideoPoker.superclass.constructor.call(this), TGE.AssetManager.useSpriteSheets = !0, this.backgroundColor = "black", this.levelConfig = new LevelConfig, this.gameData = new GameData, this.audioPlayer = new AudioPlayer(this), this.currentLevelNo = 1, this.xp = 0, this.mCreditAmt = 20, this.chipsBadgeCounter = 0, this.levelBadgeCounter = 0, this.selectedLevel = 1, this.mainGame, this.welcomeAndTutorial = !1, this.audioEnabled = !0, this.data, this.gameAssets = new GameAssets("images", "audio"), this.analytics = new TGE.GoogleAnalytics(GameConfig.GoogleAnalytics.LABEL, GameConfig.GoogleAnalytics.NATIVE_ID), this.assetManager.assignImageAssetList("loading", this.gameAssets.preGameImages), this.oniOS() || (this.gameAssets.gameImages = this.gameAssets.gameImages.concat(this.gameAssets.gameSound)), this.assetManager.assignImageAssetList("required", this.gameAssets.gameImages), this.assetManager.rootLocation = GameConfig.CDN_ROOT, TGS.AddRequiredImagesToAssetList("required"), this.registerScreen("loading", this.createLoadingScreen), this.registerScreen("mainmenu", this.createMainMenu), this.registerScreen("levelselection", this.createLevelSelection), this.registerScreen("maingame", this.createMainGameScreen), this.registerScreen("tutorial", this.createInGameTutorial), TGS.Microtransactions.RestorePurchaseCallback = this.onTGSPurchaseRestored.bind(this), GameConfig.TGS.ENABLED && (TGS.DataStore.onDataChanged = this.onDatastoreUpdated.bind(this)), TGS.IsReady() ? this.onDatastoreUpdated() : TGS.onReady = this.onDatastoreUpdated.bind(this)
}, VideoPoker.prototype = {
    createLoadingScreen: function() {
        return new LoadingScreen(this.stage.width, this.stage.height)
    },
    createMainMenu: function() {
        return new MainMenu(this.stage.width, this.stage.height)
    },
    createInGameTutorial: function() {
        return new InGameTutorial(this.stage.width, this.stage.height)
    },
    createLevelSelection: function() {
        return this.mainGame = new MainGameScreen(this.stage.width, this.stage.height), this.stage.addChild(this.mainGame), this.levelSelectionScreen = new LevelSelection(this.stage.width, this.stage.height), this.levelSelectionScreen
    },
    createMainGameScreen: function() {
        return this.mainGame
    },
    subclassStartPlaying: function() {
        this.clearScene(), this.setBackgroundColor("white"), this.buildTable()
    },
    startMainGame: function(a) {
        this.selectedLevel = a, this.mainGame.setUp()
    },
    subclassUpdateGame: function() {},
    buildTable: function() {
        this.showManagedScreen("levelselection")
    },
    onDatastoreUpdated: function() {
        this.data = TGS.Microtransactions.GetIAPProducts(), GameConfig.TGS.ENABLED && TGS.DatastoreSupported() && this.loadTGSVars()
    },
    onTGSPurchaseRestored: function(a) {
        "VPP5" === a && (this.levelsUnlocked = !0, TGS.DataStore.SaveValues({
            highest: 3
        }))
    },
    loadTGSVars: function() {
        this.currentLevelNo = TGS.DataStore.FetchIntValue("highest", 1), this.mCreditAmt = TGS.DataStore.FetchIntValue("credits", 20), this.xp = TGS.DataStore.FetchIntValue("xp", 20), this.chipsBadgeCounter = TGS.DataStore.FetchIntValue("chipsBadge", 0), this.levelBadgeCounter = TGS.DataStore.FetchIntValue("levelBadge", 0), this.welcomeAndTutorial = TGS.DataStore.FetchStringValue("tutorial", !1)
    },
    saveCredits: function(a) {
        GameConfig.TGS.ENABLED && TGS.DatastoreSupported() && TGS.DataStore.SaveValues({
            credits: a
        })
    },
    saveXP: function(a) {
        GameConfig.TGS.ENABLED && TGS.DatastoreSupported() && TGS.DataStore.SaveValues({
            xp: a
        })
    },
    saveHighestLevelUnlock: function(a) {
        GameConfig.TGS.ENABLED && TGS.DatastoreSupported() && TGS.DataStore.SaveValues({
            highest: a
        })
    },
    saveChipsBadgeCounter: function(a) {
        GameConfig.TGS.ENABLED && TGS.DatastoreSupported() && TGS.DataStore.SaveValues({
            chipsBadge: a
        })
    },
    saveLevelBadgeCounter: function(a) {
        GameConfig.TGS.ENABLED && TGS.DatastoreSupported() && TGS.DataStore.SaveValues({
            levelBadge: a
        })
    },
    saveTutorialStatus: function(a) {
        GameConfig.TGS.ENABLED && TGS.DatastoreSupported() && TGS.DataStore.SaveValues({
            tutorial: a
        })
    }
}, extend(VideoPoker, TGE.Game), LevelConfig = function() {
    this.levelData = {
        level_1: {
            maxBetAmount: 5,
            minBetAmount: 1,
            numberOfCards: 52,
            coinImage: "coin1",
            noOfXpToUnlockLevel: 0,
            winningHandImages: "winningHands1"
        },
        level_2: {
            maxBetAmount: 25,
            minBetAmount: 5,
            numberOfCards: 52,
            coinImage: "coin10",
            noOfXpToUnlockLevel: 100,
            levelUnlockBg: "level2Unlocked",
            winningHandImages: "winningHands1"
        },
        level_3: {
            maxBetAmount: 125,
            minBetAmount: 25,
            numberOfCards: 53,
            coinImage: "coin25",
            noOfXpToUnlockLevel: 1e3,
            levelUnlockBg: "level3Unlocked",
            winningHandImages: "winningHands2"
        },
        levelSelectionScreen: {}
    }
}, GameData = function() {
    this.inGameData = {
        winningHandAmount: {
            royalFlush: 250,
            fiveOfAkind: 150,
            wildroyalflush: 80,
            straightFlush: 50,
            fourOfAkind: 25,
            fullHouse: 9,
            flush: 6,
            straight: 4,
            threeOfAkind: 3,
            twoPair: 2
        },
        rules: {
            rules0: 250,
            rules1: 50,
            rules2: 25,
            rules3: 9,
            rules4: 6,
            rules5: 4,
            rules6: 3,
            rules7: 2,
            rules8: 1
        },
        thirdLevelRules: {
            rules20: 250,
            rules21: 150,
            rules22: 80,
            rules23: 50,
            rules24: 25,
            rules25: 9,
            rules26: 6,
            rules27: 4,
            rules28: 3,
            rules29: 2,
            rules210: 1
        },
        cardsInformation: {
            totalNoOfCards: 5,
            differenceBtnTwoCards: 120
        },
        levelSelectionScreen: {
            level1PlayBtnX: 538,
            level1PlayBtnY: 456,
            level2PlayBtnX: 538,
            level2PlayBtnY: 553,
            level3PlayBtnX: 538,
            level3PlayBtnY: 653,
            level4PlayBtnX: 538,
            level4PlayBtnY: 753,
            buyChipsX: 538,
            buyChipsY: 330
        },
        winningHandTextImages: {
            flush: "flush",
            straight: "straight",
            straightFlush: "straightflush",
            twoPair: "twopairs",
            fullHouse: "fullhouse",
            fourOfAkind: "fourofakind",
            threeOfAkind: "threeofakind",
            royalFlush: "royalflush",
            fiveOfAkind: "fiveofakind",
            pairOfJackOrMore: "jacksorbetter",
            wildroyalflush: "wildroyalflush"
        },
        badgesPopup: {
            noOfMenu: 6
        },
        buyMoreChips: {
            noOfMenu: 5
        },
        updateChipsBadgeData: {
            OneThousandChips: 1e3,
            fiveThousandChips: 5e3,
            tenThousandChips: 1e4
        },
        winningResultFireworks: {
            flush: "flushStar",
            straight: "straightStar",
            straightFlush: "straightFlushStar",
            twoPair: "twoPairStar",
            fullHouse: "fullHouseStar",
            fourOfAkind: "fourOfAkindStar",
            threeOfAkind: "threeOfAkindStar",
            royalFlush: "royalFlushStar",
            fiveOfAkind: "fiveOfAkindStar",
            pairOfJackOrMore: "pairOfJackOrMoreStar",
            wildroyalflush: "wildroyalflushStar"
        }
    }
}, GameAssets = function(a, b) {
    this.gameImages = [{
        id: "badgesWithGlow",
        url: a + "/gameScreen/levelSelectionScreen/badgesWithGlow.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "buyWithGlow",
        url: a + "/gameScreen/levelSelectionScreen/buyWithGlow.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "playWithGlow",
        url: a + "/gameScreen/levelSelectionScreen/playWithGlow.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "menu",
        url: a + "/gameScreen/levelSelectionScreen/menu.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "instructions",
        url: a + "/gameScreen/levelSelectionScreen/instructions.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "upperTabsForMenu",
        url: a + "/gameScreen/levelSelectionScreen/upperTabsForMenu.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "back",
        url: a + "/gameScreen/levelSelectionScreen/back.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "menuText",
        url: a + "/gameScreen/levelSelectionScreen/menuText.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "unlockLevel",
        url: a + "/gameScreen/levelSelectionScreen/unlockLevel.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "instructions1",
        url: a + "/gameScreen/levelSelectionScreen/instructions1.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "instructions2",
        url: a + "/gameScreen/levelSelectionScreen/instructions2.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "instructions3",
        url: a + "/gameScreen/levelSelectionScreen/instructions3.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "instructions4",
        url: a + "/gameScreen/levelSelectionScreen/instructions4.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "buyMoreChipsGlow",
        url: a + "/gameScreen/levelSelectionScreen/buyMoreChipsGlow.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "instructions5",
        url: a + "/gameScreen/levelSelectionScreen/instructions5.png"
    }, {
        id: "menuAndInstructions",
        url: a + "/gameScreen/levelSelectionScreen/menuAndInstructions.png"
    }, {
        id: "light1",
        url: a + "/splashScreen/light1.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "light2",
        url: a + "/splashScreen/light2.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "star1_1",
        url: a + "/splashScreen/star1_1.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "star1_2",
        url: a + "/splashScreen/star1_2.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "star2_1",
        url: a + "/splashScreen/star2_1.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "star2_2",
        url: a + "/splashScreen/star2_2.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "partyText",
        url: a + "/splashScreen/partyText.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "glow",
        url: a + "/splashScreen/glow.png"
    }, {
        id: "winparticle",
        url: a + "/splashScreen/winparticle.png"
    }, {
        id: "wintextstar",
        url: a + "/splashScreen/wintextstar.png"
    }, {
        id: "levelBadge1",
        url: a + "/badges/levelBadge1.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "levelBadge2",
        url: a + "/badges/levelBadge2.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "levelBadge3",
        url: a + "/badges/levelBadge3.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "chipsBadge1",
        url: a + "/badges/chipsBadge1.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "chipsBadge2",
        url: a + "/badges/chipsBadge2.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "chipsBadge3",
        url: a + "/badges/chipsBadge3.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "BadgeLevel1",
        url: a + "/badges/BadgeLevel1.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "BadgeLevel2",
        url: a + "/badges/BadgeLevel2.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "BadgeLevel3",
        url: a + "/badges/BadgeLevel3.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "BadgeChips1",
        url: a + "/badges/BadgeChips1.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "BadgeChips2",
        url: a + "/badges/BadgeChips2.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "BadgeChips3",
        url: a + "/badges/BadgeChips3.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "Outerglow",
        url: a + "/badges/Outerglow.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "level_unlock",
        url: a + "/badges/level_unlock.png"
    }, {
        id: "level2Unlocked",
        url: a + "/gameScreen/levelUpPopup/level2Unlocked.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "level3Unlocked",
        url: a + "/gameScreen/levelUpPopup/level3Unlocked.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "levelUnlockedBg",
        url: a + "/gameScreen/levelUpPopup/levelUnlockedBg.png"
    }, {
        id: "buyPopup",
        url: a + "/buyChipsPopup/buyPopup.png"
    }, {
        id: "bg_transperent",
        url: a + "/buyChipsPopup/bg_transperent.png"
    }, {
        id: "ok",
        url: a + "/gameScreen/ok.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "unMute",
        url: a + "/gameScreen/unMute.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "mute",
        url: a + "/gameScreen/mute.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "betMaxBtn",
        url: a + "/gameScreen/betMaxBtn.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "betMinBtn",
        url: a + "/gameScreen/betMinBtn.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "coin1",
        url: a + "/gameScreen/coin1.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "coin10",
        url: a + "/gameScreen/coin10.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "coin25",
        url: a + "/gameScreen/coin25.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "dealBtn",
        url: a + "/gameScreen/dealBtn.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "coinGlow",
        url: a + "/gameScreen/coinGlow.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "help",
        url: a + "/gameScreen/help.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "downBg",
        url: a + "/gameScreen/downBg.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "red",
        url: a + "/gameScreen/red.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "redBall",
        url: a + "/gameScreen/redBall.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "black",
        url: a + "/gameScreen/black.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "clickme",
        url: a + "/gameScreen/clickme.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "button_draw",
        url: a + "/gameScreen/button_draw.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "yesbtn",
        url: a + "/gameScreen/yesbtn.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "nobtn",
        url: a + "/gameScreen/nobtn.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "homebtn",
        url: a + "/gameScreen/homebtn.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "lock",
        url: a + "/gameScreen/lock.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "Next_BTN",
        url: a + "/gameScreen/Next_BTN.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "smallPopup",
        url: a + "/gameScreen/smallPopup.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "close",
        url: a + "/gameScreen/close.png",
        sheet: a + "/imagePack/Vp1.png"
    }, {
        id: "winningHands1",
        url: a + "/gameScreen/winningHands1.png"
    }, {
        id: "winningHands2",
        url: a + "/gameScreen/winningHands2.png"
    }, {
        id: "blankpopup",
        url: a + "/gameScreen/blankpopup.png"
    }, {
        id: "closeMenuBg",
        url: a + "/gameScreen/closeMenuBg.png"
    }, {
        id: "cardBG",
        url: a + "/gameScreen/cardBG.png"
    }, {
        id: "creditBg",
        url: a + "/gameScreen/creditBg.png"
    }, {
        id: "minigamePopup",
        url: a + "/gameScreen/minigamePopup.png"
    }, {
        id: "bg_tint",
        url: a + "/gameScreen/bg_tint.png"
    }, {
        id: "morecoinpopup",
        url: a + "/gameScreen/morecoinpopup.png"
    }, {
        id: "cardBackground",
        url: a + "/gameScreen/cards/cardBackground.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "1Spades",
        url: a + "/gameScreen/cards/1Spades.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "2Spades",
        url: a + "/gameScreen/cards/2Spades.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "3Spades",
        url: a + "/gameScreen/cards/3Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "4Spades",
        url: a + "/gameScreen/cards/4Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "5Spades",
        url: a + "/gameScreen/cards/5Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "6Spades",
        url: a + "/gameScreen/cards/6Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "7Spades",
        url: a + "/gameScreen/cards/7Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "8Spades",
        url: a + "/gameScreen/cards/8Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "9Spades",
        url: a + "/gameScreen/cards/9Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "10Spades",
        url: a + "/gameScreen/cards/10Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "11Spades",
        url: a + "/gameScreen/cards/11Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "12Spades",
        url: a + "/gameScreen/cards/12Spades.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "13Spades",
        url: a + "/gameScreen/cards/13Spades.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "1Clubs",
        url: a + "/gameScreen/cards/1Clubs.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "2Clubs",
        url: a + "/gameScreen/cards/2Clubs.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "3Clubs",
        url: a + "/gameScreen/cards/3Clubs.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "4Clubs",
        url: a + "/gameScreen/cards/4Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "5Clubs",
        url: a + "/gameScreen/cards/5Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "6Clubs",
        url: a + "/gameScreen/cards/6Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "7Clubs",
        url: a + "/gameScreen/cards/7Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "8Clubs",
        url: a + "/gameScreen/cards/8Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "9Clubs",
        url: a + "/gameScreen/cards/9Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "10Clubs",
        url: a + "/gameScreen/cards/10Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "11Clubs",
        url: a + "/gameScreen/cards/11Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "12Clubs",
        url: a + "/gameScreen/cards/12Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "13Clubs",
        url: a + "/gameScreen/cards/13Clubs.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "1Hearts",
        url: a + "/gameScreen/cards/1Hearts.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "2Hearts",
        url: a + "/gameScreen/cards/2Hearts.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "3Hearts",
        url: a + "/gameScreen/cards/3Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "4Hearts",
        url: a + "/gameScreen/cards/4Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "5Hearts",
        url: a + "/gameScreen/cards/5Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "6Hearts",
        url: a + "/gameScreen/cards/6Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "7Hearts",
        url: a + "/gameScreen/cards/7Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "8Hearts",
        url: a + "/gameScreen/cards/8Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "9Hearts",
        url: a + "/gameScreen/cards/9Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "10Hearts",
        url: a + "/gameScreen/cards/10Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "11Hearts",
        url: a + "/gameScreen/cards/11Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "12Hearts",
        url: a + "/gameScreen/cards/12Hearts.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "13Hearts",
        url: a + "/gameScreen/cards/13Hearts.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "1Diamonds",
        url: a + "/gameScreen/cards/1Diamonds.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "2Diamonds",
        url: a + "/gameScreen/cards/2Diamonds.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "3Diamonds",
        url: a + "/gameScreen/cards/3Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "4Diamonds",
        url: a + "/gameScreen/cards/4Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "5Diamonds",
        url: a + "/gameScreen/cards/5Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "6Diamonds",
        url: a + "/gameScreen/cards/6Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "7Diamonds",
        url: a + "/gameScreen/cards/7Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "8Diamonds",
        url: a + "/gameScreen/cards/8Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "9Diamonds",
        url: a + "/gameScreen/cards/9Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "10Diamonds",
        url: a + "/gameScreen/cards/10Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "11Diamonds",
        url: a + "/gameScreen/cards/11Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "12Diamonds",
        url: a + "/gameScreen/cards/12Diamonds.png",
        sheet: a + "/imagePack/Vp4.png"
    }, {
        id: "13Diamonds",
        url: a + "/gameScreen/cards/13Diamonds.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "53Joker",
        url: a + "/gameScreen/cards/53Joker.png",
        sheet: a + "/imagePack/Vp5.png"
    }, {
        id: "fiveofakind",
        url: a + "/gameScreen/winningHandText/fiveofakind.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "flush",
        url: a + "/gameScreen/winningHandText/flush.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "fourofakind",
        url: a + "/gameScreen/winningHandText/fourofakind.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "fullhouse",
        url: a + "/gameScreen/winningHandText/fullhouse.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "jacksorbetter",
        url: a + "/gameScreen/winningHandText/jacksorbetter.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "royalflush",
        url: a + "/gameScreen/winningHandText/royalflush.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "twopairs",
        url: a + "/gameScreen/winningHandText/twopairs.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "wildroyalflush",
        url: a + "/gameScreen/winningHandText/wildroyalflush.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "threeofakind",
        url: a + "/gameScreen/winningHandText/threeofakind.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "straight",
        url: a + "/gameScreen/winningHandText/straight.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "straightflush",
        url: a + "/gameScreen/winningHandText/straightflush.png",
        sheet: a + "/imagePack/Vp2.png"
    }, {
        id: "fiveOfAkindStar",
        url: a + "/gameScreen/winningHandText/fiveOfAkindStar.png"
    }, {
        id: "flushStar",
        url: a + "/gameScreen/winningHandText/flushStar.png"
    }, {
        id: "fourOfAkindStar",
        url: a + "/gameScreen/winningHandText/fourOfAkindStar.png"
    }, {
        id: "fullHouseStar",
        url: a + "/gameScreen/winningHandText/fullHouseStar.png"
    }, {
        id: "pairOfJackOrMoreStar",
        url: a + "/gameScreen/winningHandText/pairOfJackOrMoreStar.png"
    }, {
        id: "royalFlushStar",
        url: a + "/gameScreen/winningHandText/royalFlushStar.png"
    }, {
        id: "twoPairStar",
        url: a + "/gameScreen/winningHandText/twoPairStar.png"
    }, {
        id: "wildroyalflushStar",
        url: a + "/gameScreen/winningHandText/wildroyalflushStar.png"
    }, {
        id: "threeOfAkindStar",
        url: a + "/gameScreen/winningHandText/threeOfAkindStar.png"
    }, {
        id: "straightStar",
        url: a + "/gameScreen/winningHandText/straightStar.png"
    }, {
        id: "straightFlushStar",
        url: a + "/gameScreen/winningHandText/straightFlushStar.png"
    }, {
        id: "Star_a",
        url: a + "/gameScreen/winningHandText/Star_a.png"
    }, {
        id: "Star_b",
        url: a + "/gameScreen/winningHandText/Star_b.png"
    }, {
        id: "Star_c",
        url: a + "/gameScreen/winningHandText/Star_c.png"
    }, {
        id: "bg",
        url: b + "/bg.ogg",
        backup_url: b + "/bg.mp3",
        assetType: "audio"
    }], this.preGameImages = [{
        id: "logocodewalla",
        url: a + "/loadingScreen/logocodewalla.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "logotresensa",
        url: a + "/loadingScreen/logotresensa.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "playSplash",
        url: a + "/splashScreen/playSplash.png",
        sheet: a + "/imagePack/Vp3.png"
    }, {
        id: "gameScreenBg",
        url: a + "/loadingScreen/gameScreenBg.jpg"
    }, {
        id: "videoPokerText",
        url: a + "/splashScreen/videoPokerText.png"
    }], this.gameSound = [{
        id: "button",
        url: b + "/button.ogg",
        backup_url: b + "/button.mp3",
        assetType: "audio"
    }, {
        id: "redorblack",
        url: b + "/redorblack.ogg",
        backup_url: b + "/redorblack.mp3",
        assetType: "audio"
    }, {
        id: "splashscreen",
        url: b + "/splashscreen02.ogg",
        backup_url: b + "/splashscreen02.mp3",
        assetType: "audio"
    }, {
        id: "win01",
        url: b + "/win01.ogg",
        backup_url: b + "/win01.mp3",
        assetType: "audio"
    }, {
        id: "card_distribute",
        url: b + "/card_distribute.ogg",
        backup_url: b + "/card_distribute.mp3",
        assetType: "audio"
    }, {
        id: "card_flip",
        url: b + "/card_flip.ogg",
        backup_url: b + "/card_flip.mp3",
        assetType: "audio"
    }, {
        id: "lock1",
        url: b + "/lock.ogg",
        backup_url: b + "/lock.mp3",
        assetType: "audio"
    }];
    var c = new Font;
    c.fontFamily = "Market Deco", c.src = "./assets-2.2.1/font/Market_Deco.ttf"
    //c.src = GameConfig.CDN_ROOT + "font/Market_Deco.ttf"
}, BuyLevelConfirmation = function(a) {
    BuyLevelConfirmation.superclass.constructor.apply(this, arguments), this.bIsPurchase = a, this.mouseEnabled = !0, this.setup({
        x: 0,
        y: 0,
        image: "bg_tint"
    }), this.registrationX = this.registrationY = 0, this.addChild((new TGE.Sprite).setup({
        image: "minigamePopup",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5),
        scaleY: .4
    })), this.mTextField = this.addChild((new TGE.Text).setup({
        text: "你准备花费500筹码？",
        font: "30px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.45)
    })), this.mYesBtn = this.addChild((new TGE.Button).setup({
        image: "yesbtn",
        x: this.percentageOfWidth(.35),
        y: this.percentageOfHeight(.55),
        numStates: 1,
        pressFunction: this.miniGameYesBtn.bind(this)
    })), this.mNoBtn = (new TGE.Button).setup({
        image: "nobtn",
        x: this.percentageOfWidth(.65),
        y: this.percentageOfHeight(.55),
        numStates: 1,
        pressFunction: this.miniGameNoBtn.bind(this)
    }), this.addChild(this.mNoBtn)
}, BuyLevelConfirmation.prototype = {
    miniGameYesBtn: function() {
        this.bIsPurchase ? TGE.Game._sInstance.mCreditAmt >= 500 ? (TGE.Game.GetInstance().saveHighestLevelUnlock(TGE.Game.GetInstance().currentLevelNo + 1), TGE.Game.GetInstance().saveCredits(TGE.Game.GetInstance().mCreditAmt - 500), this.markForRemoval(), this.parent.onLevelBuySucess(), TGE.Game._sInstance.mainGame.updateLevelBadgeData(), TGE.Game._sInstance.stage.addChild(new LevelBadgePopup(this.width, this.height))) : (this.mTextField.markForRemoval(), this.addChild((new TGE.Text).setup({
            text: "你没有足够的筹码",
            font: "30px Market Deco",
            color: "#f9db15",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.43)
        })), this.addChild((new TGE.Text).setup({
            text: " 你想购买筹码?",
            font: "30px Market Deco",
            color: "#f9db15",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.48)
        })), this.mYesBtn.pressFunction = this.buyChipsYesBtn.bind(this)) : (this.parent.buyMore(), this.markForRemoval()), TGE.Game._sInstance.audioPlayer.playAudio("button", !1)
    },
    buyChipsYesBtn: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.parent.addChild(new BuyMoreChipsPopUp(this.width, this.height, "levelScreen")), this.markForRemoval()
    },
    miniGameNoBtn: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.markForRemoval()
    }
}, extend(BuyLevelConfirmation, TGE.Sprite), Popup = function(a, b, c, d) {
    Popup.superclass.constructor.apply(this, arguments), this._parent = d, this.levelNo = c, this.addChild((new TGE.Sprite).setup({
        image: "gameScreenBg",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    })), this.levelUpBg = (new TGE.Sprite).setup({
        image: "levelUnlockedBg",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    }), this.addChild(this.levelUpBg), this.levelUpBgText = (new TGE.Sprite).setup({
        image: TGE.Game._sInstance.levelConfig.levelData["level_" + c].levelUnlockBg,
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-.24)
    }), this.levelUpBg.addChild(this.levelUpBgText), this.levelUpBg.addChild((new TGE.Text).setup({
        text: "恭喜 !",
        font: "35px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-.15)
    })), this.levelUpBg.addChild((new TGE.Text).setup({
        text: "你已经解锁等级 " + this.levelNo,
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(.1)
    })), this.levelUpBg.addChild((new TGE.Text).setup({
        text: "你要玩这个等级",
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(.15)
    })), this.noBtn = (new TGE.Button).setup({
        image: "nobtn",
        x: this.percentageOfWidth(-.1),
        y: this.percentageOfHeight(.24),
        numStates: 1,
        pressFunction: Popup.prototype.noBtnClicked.bind(this)
    }), this.levelUpBg.addChild(this.noBtn), this.noBtn.mouseEnabled = !1, this.yesBtn = (new TGE.Button).setup({
        image: "yesbtn",
        x: this.percentageOfWidth(.1),
        y: this.percentageOfHeight(.24),
        numStates: 1,
        pressFunction: Popup.prototype.yesBtnClicked.bind(this)
    }), this.levelUpBg.addChild(this.yesBtn), this.yesBtn.mouseEnabled = !1, this.badge = (new TGE.Sprite).setup({
        image: "levelBadge" + TGE.Game._sInstance.levelBadgeCounter,
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-2)
    }), this.levelUpBg.addChild(this.badge), this.badge.scaleX = this.badge.scaleY = .7, CWTween.from(this.levelUpBg, .5, {
        x: this.percentageOfWidth(1.5)
    }, {
        ease: {
            name: "Back",
            type: "Out"
        },
        onComplete: this.badgeAmin.bind(this)
    }), this.addChild(new CWFireWorksEffect(this.percentageOfWidth(.1), this.percentageOfHeight(.1), ["Star_a", "Star_b", "Star_c"], 100))
}, Popup.prototype = {
    badgeAmin: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("win01", !1), CWTween.to(this.badge, .5, {
            y: this.percentageOfHeight(-.02)
        }, {
            ease: {
                name: "Back",
                type: "InOut"
            },
            onComplete: this.onAnimationComplete.bind(this)
        })
    },
    onAnimationComplete: function() {
        this.noBtn.mouseEnabled = !0, this.yesBtn.mouseEnabled = !0
    },
    yesBtnClicked: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.close(), this._parent.close(), TGE.Game._sInstance.showManagedScreen("levelselection")
    },
    noBtnClicked: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), TGE.Game._sInstance.mainGame.removeCardsAfterDraw(), TGE.Game._sInstance.mainGame.buttonsStatusAfterAnimation(), this.close()
    }
}, extend(Popup, TGE.Window), LoadingScreen = function() {
    LoadingScreen.superclass.constructor.apply(this, arguments), this.addChild((new TGE.Sprite).setup({
        image: "gameScreenBg",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    })), this.text = (new TGE.Sprite).setup({
        image: "videoPokerText",
        x: this.percentageOfWidth(.51),
        y: this.percentageOfHeight(.46)
    }), this.addChild(this.text), this.cwLogo = (new TGE.Button).setup({
        image: "logocodewalla",
        x: this.percentageOfWidth(.105),
        y: this.percentageOfHeight(.04),
        numStates: 1,
        pressFunction: MainMenu.prototype.showCWLink.bind(this)
    }), this.addChild(this.cwLogo), this.cwLogo.scaleX = this.cwLogo.scaleY = .75, this.tresensaLogo = (new TGE.Button).setup({
        image: "logotresensa",
        x: this.percentageOfWidth(.935),
        y: this.percentageOfHeight(.06),
        numStates: 1,
        pressFunction: MainMenu.prototype.showTrsLink.bind(this)
    }), this.addChild(this.tresensaLogo), this.tresensaLogo.scaleX = this.tresensaLogo.scaleY = .75, this.addChild((new TGE.Text).setup({
        text: "请等待...",
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(.45),
        y: this.percentageOfHeight(.65)
    })), this.mLoadingText = (new TGE.Text).setup({
        text: "",
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(.6),
        y: this.percentageOfHeight(.65)
    }), this.addChild(this.mLoadingText), this.addEventListener("progress", this.progressCallback.bind(this))
}, LoadingScreen.prototype = {
    progressCallback: function(a) {
        this.mLoadingText.text = "" + a.percentComplete < 1 ? Math.round(100 * a.percentComplete) + "%" : ""
    }
}, extend(LoadingScreen, TGE.Window), MainMenu = function() {
    MainMenu.superclass.constructor.apply(this, arguments), this.backgroundColor = "black", this.fps = Math.round(1e3 / TGE.Game._sInstance._mFrameTime).toFixed(0);
    var a = (new TGE.Sprite).setup({
        image: "gameScreenBg",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    });
    this.addChild(a), TGE.Game._sInstance.audioPlayer.playAudio("splashscreen", !1), this.loginButton = this.addChild(TGS.CreateLoginWidget().setup({
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(1.5)
    })), CWTween.to(this.loginButton, 1.5, {
        x: this.pixelsFromLeft(130),
        y: this.pixelsFromBottom(120)
    }, {
        ease: {
            name: "Elastic",
            type: "InOut"
        },
        onComplete: this.onAnimComplete.bind(this)
    }), this.glow = (new TGE.Sprite).setup({
        image: "glow",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.41)
    }), this.addChild(this.glow), this.glow.scaleX = this.glow.scaleY = 1.2, this.glow.alpha = 0, this.fps > 15 && (this.fireWork = new SparkleEffect(a.x, a.y, "winparticle", 12), this.addChild(this.fireWork), this.fireWork.visible = !1), this.text = (new TGE.Sprite).setup({
        image: "videoPokerText",
        x: this.percentageOfWidth(.51),
        y: this.percentageOfHeight(.46)
    }), this.addChild(this.text), this.playBtn = (new TGE.Button).setup({
        image: "playSplash",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(1.5),
        numStates: 1,
        pressFunction: MainMenu.prototype.playGame.bind(this)
    }), this.addChild(this.playBtn), this.playBtn.mouseEnabled = !1, this.cwLogo = (new TGE.Button).setup({
        image: "logocodewalla",
        x: this.percentageOfWidth(.105),
        y: this.percentageOfHeight(.04),
        numStates: 1,
        pressFunction: MainMenu.prototype.showCWLink.bind(this)
    }), this.addChild(this.cwLogo), this.cwLogo.scaleX = this.cwLogo.scaleY = .75, this.tresensaLogo = (new TGE.Button).setup({
        image: "logotresensa",
        x: this.percentageOfWidth(.935),
        y: this.percentageOfHeight(.06),
        numStates: 1,
        pressFunction: MainMenu.prototype.showTrsLink.bind(this)
    }), this.addChild(this.tresensaLogo), this.tresensaLogo.scaleX = this.tresensaLogo.scaleY = .75, CWTween.from(this.cwLogo, 1, {
        x: this.percentageOfWidth(-1)
    }), CWTween.from(this.tresensaLogo, 1, {
        x: this.percentageOfWidth(2)
    }), CWTween.to(this.playBtn, 1.5, {
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.8)
    }, {
        ease: {
            name: "Elastic",
            type: "InOut"
        },
        onComplete: this.onAnimComplete.bind(this)
    });
    var b = (new TGE.Sprite).setup({
        image: "light1",
        x: 20,
        y: -70
    });
    this.text.addChild(b);
    var c = (new TGE.Sprite).setup({
        image: "light2",
        x: 22,
        y: -70
    });
    this.text.addChild(c);
    var d = (new TGE.Sprite).setup({
        image: "star1_1",
        x: 200,
        y: 100
    });
    this.text.addChild(d);
    var e = (new TGE.Sprite).setup({
        image: "star1_2",
        x: 200,
        y: 100
    });
    this.text.addChild(e), e.alpha = 0;
    var f = (new TGE.Sprite).setup({
        image: "star2_1",
        x: -135,
        y: -185
    });
    this.text.addChild(f);
    var g = (new TGE.Sprite).setup({
        image: "star2_2",
        x: -135,
        y: -185
    });
    this.text.addChild(g), g.alpha = 0;
    var h = (new TGE.Sprite).setup({
        image: "star2_1",
        x: -150,
        y: 120
    });
    this.text.addChild(h);
    var i = (new TGE.Sprite).setup({
        image: "star2_2",
        x: -150,
        y: 120
    });
    this.text.addChild(i), i.alpha = 0;
    var j = (new TGE.Sprite).setup({
        image: "partyText",
        x: 19,
        y: 37
    });
    this.text.addChild(j), g.alpha = 0, CWTween.to(b, .3, {
        alpha: 0
    }, {
        reverse: !0
    }), c.alpha = 0, CWTween.to(c, .3, {
        alpha: 1
    }, {
        reverse: !0
    }), CWTween.from(d, .2, {
        alpha: 1
    }, {
        reverse: !0
    }), e.alpha = 1, CWTween.from(e, .2, {
        alpha: 0
    }, {
        reverse: !0
    }), CWTween.from(f, .5, {
        alpha: 1
    }, {
        reverse: !0
    }), g.alpha = 1, CWTween.from(g, .5, {
        alpha: 0
    }, {
        reverse: !0
    }), CWTween.to(h, .8, {
        alpha: 0
    }, {
        reverse: !0
    }), i.alpha = 0, CWTween.to(i, .8, {
        alpha: 1
    }, {
        reverse: !0
    }), CWTween.from(j, .3, {
        alpha: 0
    }, {
        reverse: !0
    })
}, MainMenu.prototype = {
    onAnimComplete: function() {
        this.glow.alpha = .2, this.fireWork && (this.fireWork.visible = !0), this.playBtn.mouseEnabled = !0, this.addEventListener("update", this.Update.bind(this))
    },
    playGame: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.playBtn.mouseEnabled = !1, this.glow.visible = !1, this.fireWork && (this.fireWork.visible = !1), CWTween.to(this.text, 1.5, {
            x: this.percentageOfWidth(.51),
            y: this.percentageOfHeight(-.5)
        }, {
            ease: {
                name: "Elastic",
                type: "InOut"
            },
            onComplete: this.onAnimationComplete2.bind(this)
        }), CWTween.to(this.playBtn, 1.5, {
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(1.5)
        }, {
            ease: {
                name: "Elastic",
                type: "InOut"
            }
        })
    },
    Update: function() {
        this.glow.rotation = this.glow.rotation + .8
    },
    onAnimationComplete2: function() {
        0 == TGE.Game._sInstance.welcomeAndTutorial ? (this.welcomeScreen(), TGE.Game._sInstance.welcomeAndTutorial = !0, TGE.Game._sInstance.saveTutorialStatus(TGE.Game._sInstance.welcomeAndTutorial)) : this.close(TGE.Game.prototype.PlayGame.bind(TGE.Game.GetInstance()))
    },
    welcomeScreen: function() {
        TGE.Game._sInstance.stage.addChild(new WelcomeScreen(this.width, this.height)), this.close()
    },
    showCWLink: function() {
       // TGE.Game.GetInstance().OpenURL("http://www.codewalla.com/")
    },
    showTrsLink: function() {
        //TGE.Game.GetInstance().OpenURL("http://www.tresensa.com/")
    }
}, extend(MainMenu, TGE.Window);
var CardDeck = function(a) {
    this.serialNumArr = [], this.generatCardsForLevel = a
};
CardDeck.prototype = {
    generateRandomNumber: function(a) {
        for (var b = Math.floor(Math.random() * this.generatCardsForLevel + 1); - 1 != a.indexOf(b);) b = Math.floor(Math.random() * this.generatCardsForLevel + 1);
        return b
    },
    getCardSuitRank: function(a) {
        var b = {
            suit: null,
            rank: null,
            color: null
        };
        return 14 > a ? (b.suit = "Spades", b.color = "black") : a > 13 && 27 > a ? (b.suit = "Clubs", b.color = "black") : a > 26 && 40 > a ? (b.suit = "Hearts", b.color = "red") : a > 39 && 53 > a ? (b.suit = "Diamonds", b.color = "red") : 53 == a && (b.suit = "Joker", b.color = "universal"), b.rank = a % 13 == 0 ? 13 : 53 == a ? 53 : a % 13, b
    }
}, MainGameScreen = function() {
    return MainGameScreen.superclass.constructor.apply(this, arguments), this
}, MainGameScreen.prototype = {
    setUp: function() {
        this.adCount = -1, this.betCount = 0, this.RandomNoArray = [], this.CardArray = [], this.winningAmt = 0, this.displayHint = null, this.gameBackground = (new TGE.Sprite).setup({
            image: "gameScreenBg",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        }), this.addChild(this.gameBackground), this.blankpopup = (new TGE.Sprite).setup({
            image: "blankpopup",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.41)
        }), this.addChild(this.blankpopup), this.downBg = (new TGE.Sprite).setup({
            image: "downBg",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.94)
        }), this.addChild(this.downBg), this.coinBtn = (new TGE.Button).setup({
            image: TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].coinImage,
            x: this.downBg.percentageOfWidth(-.4),
            y: this.downBg.percentageOfHeight(0),
            numStates: 1,
            pressFunction: MainGameScreen.prototype.betPlusFunction.bind(this)
        }), this.downBg.addChild(this.coinBtn), this.coinGlow = (new TGE.Sprite).setup({
            image: "coinGlow",
            x: this.downBg.percentageOfWidth(-.4),
            y: this.downBg.percentageOfHeight(0)
        }), this.downBg.addChild(this.coinGlow), this.betMinBtn = (new TGE.Button).setup({
            image: "betMinBtn",
            x: this.downBg.percentageOfWidth(-.13),
            y: this.downBg.percentageOfHeight(0),
            numStates: 1,
            pressFunction: MainGameScreen.prototype.betMinFunction.bind(this)
        }), this.downBg.addChild(this.betMinBtn), this.betMaxBtn = (new TGE.Button).setup({
            image: "betMaxBtn",
            x: this.downBg.percentageOfWidth(.11),
            y: this.downBg.percentageOfHeight(0),
            numStates: 1,
            pressFunction: MainGameScreen.prototype.betMaxFunction.bind(this)
        }), this.downBg.addChild(this.betMaxBtn), this.dealBtn = (new TGE.Button).setup({
            image: "dealBtn",
            x: this.downBg.percentageOfWidth(.35),
            y: this.downBg.percentageOfHeight(0),
            numStates: 1,
            pressFunction: MainGameScreen.prototype.dealBtnFunction.bind(this)
        }), this.downBg.addChild(this.dealBtn), this.button_draw = (new TGE.Button).setup({
            image: "button_draw",
            x: this.downBg.percentageOfWidth(.35),
            y: this.downBg.percentageOfHeight(0),
            numStates: 1,
            pressFunction: MainGameScreen.prototype.drawFunction.bind(this)
        }), this.downBg.addChild(this.button_draw), this.button_draw.visible = !1, this.cardBG = (new TGE.Sprite).setup({
            image: "cardBG",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.737)
        }), this.addChild(this.cardBG), this.creditBg = (new TGE.Sprite).setup({
            image: "creditBg",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.145)
        }), this.addChild(this.creditBg), this.mBet = (new TGE.Text).setup({
            text: "0",
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.creditBg.percentageOfWidth(-.1),
            y: this.creditBg.percentageOfHeight(.1)
        }), this.creditBg.addChild(this.mBet), this.mCreditText = (new TGE.Text).setup({
            text: "" + TGE.Game._sInstance.mCreditAmt,
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.creditBg.percentageOfWidth(.33),
            y: this.creditBg.percentageOfHeight(.1)
        }), this.creditBg.addChild(this.mCreditText), this.xpText = (new TGE.Text).setup({
            text: "" + TGE.Game._sInstance.xp,
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.creditBg.percentageOfWidth(-.34),
            y: this.creditBg.percentageOfHeight(.1)
        }), this.creditBg.addChild(this.xpText), this.mWinText = (new TGE.Text).setup({
            text: "0",
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.creditBg.percentageOfWidth(.1),
            y: this.creditBg.percentageOfHeight(.1)
        }), this.creditBg.addChild(this.mWinText), this.closeMenuBg = (new TGE.Sprite).setup({
            image: "closeMenuBg",
            x: this.percentageOfWidth(1.1),
            y: this.percentageOfHeight(.02)
        }), this.addChild(this.closeMenuBg), this.homebtn = (new TGE.Button).setup({
            image: "homebtn",
            x: this.closeMenuBg.percentageOfWidth(-.43),
            y: this.closeMenuBg.percentageOfHeight(.2),
            numStates: 1,
            pressFunction: MainGameScreen.prototype.homeBtnFunction.bind(this)
        }), this.closeMenuBg.addChild(this.homebtn), this.soundBtn = (new TGE.Button).setup({
            image: "unMute",
            x: this.closeMenuBg.percentageOfWidth(-.305),
            y: this.closeMenuBg.percentageOfHeight(.2),
            numStates: 1,
            pressFunction: this.toggleSound.bind(this)
        }), this.closeMenuBg.addChild(this.soundBtn), this.setAudioImage(), this.helpBtn = (new TGE.Button).setup({
            image: "help",
            x: this.closeMenuBg.percentageOfWidth(-.18),
            y: this.closeMenuBg.percentageOfHeight(.2),
            numStates: 1,
            pressFunction: this.showInstruction.bind(this)
        }), this.closeMenuBg.addChild(this.helpBtn), this.cardDeckObj = new CardDeck(TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].numberOfCards), this.hintIndexArr = [], this.disableCard = !0, this.tempCardRankArrtoCheckResult = [], this.finalResult = null, this.hintImage = [], this.xIncrement = 0, this.dealBtnClicked = !1, this.jokerfoundInCardDeck = null, this.loseMessage = ["对不起！运气不来没有办法！", "对不起！祝你下次好运！.", "对不起！幸运女神和你擦肩而过"], this.winningHandPopup = new winningHandPopup(this.width, this.height), this.addChild(this.winningHandPopup), this.winningHandPopup.setUp(this.betCount), CWTween.from(this.betMinBtn, .5, {}, {
            delay: 1,
            onComplete: this.betInfoPopup.bind(this)
        }), this.mainGameScreenWindowAnimation(), this.coinGlowAnimation()
    },
    betInfoPopup: function() {
        this.addChild(new InGamePopup(this.width / 2, this.height / 2, "betInfo" + TGE.Game._sInstance.selectedLevel))
    },
    mainGameScreenWindowAnimation: function() {
        this.buttonsStatusWhileAnimation(), CWTween.from(this.closeMenuBg, .5, {
            y: this.percentageOfHeight(-.5)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "Out"
            }
        }), CWTween.from(this.creditBg, .5, {
            y: this.percentageOfHeight(-.5)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "Out"
            }
        }), CWTween.from(this.cardBG, .5, {
            y: this.percentageOfHeight(1.5)
        }, {
            ease: {
                delay: 0,
                name: "Back",
                type: "Out"
            }
        }), CWTween.from(this.downBg, .5, {
            y: this.percentageOfHeight(1.5)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "Out"
            }
        }), CWTween.from(this.blankpopup, .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        }), CWTween.from(this.winningHandPopup, .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.cardBackground.bind(this)
        })
    },
    mainGameScreenAfterMiniGame: function() {
        this.buttonsStatusWhileAnimation(), CWTween.to(this.closeMenuBg, .5, {
            y: this.percentageOfHeight(.02)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.creditBg, .5, {
            y: this.percentageOfHeight(.145)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.cardBG, .5, {
            y: this.percentageOfHeight(.737)
        }, {
            ease: {
                delay: 0,
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.downBg, .5, {
            y: this.percentageOfHeight(.94)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.blankpopup, .5, {
            scaleX: 1,
            scaleY: 1
        }, {
            ease: {
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.winningHandPopup, .5, {
            scaleX: 1,
            scaleY: 1
        }, {
            ease: {
                name: "Back",
                type: "In"
            }
        })
    },
    mainGameScreenObjectsRemove: function() {
        CWTween.to(this.closeMenuBg, .5, {
            y: this.percentageOfHeight(-.5)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.creditBg, .5, {
            y: this.percentageOfHeight(-.5)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.cardBG, .5, {
            y: this.percentageOfHeight(1.5)
        }, {
            ease: {
                delay: 0,
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.downBg, .5, {
            y: this.percentageOfHeight(1.5)
        }, {
            delay: 0,
            ease: {
                name: "Back",
                type: "In"
            }
        }), CWTween.to(this.blankpopup, .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "In"
            }
        }), this.cardsRemoveAnimation(), CWTween.to(this.winningHandPopup, .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.showMiniGame.bind(this)
        })
    },
    coinGlowAnimation: function() {
        CWTween.from(this.coinGlow, 1, {
            alpha: 0
        }, {
            reverse: !0
        })
    },
    stopCoinGlowAnimation: function() {
        CWTween.remove(this.coinGlow)
    },
    cardsRemoveAnimation: function() {
        for (var a = 0; 5 > a; a++) CWTween.to(this.CardArray[a], .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.removeCards.bind(this, a)
        })
    },
    removeCards: function(a) {
        this.CardArray[a].markForRemoval()
    },
    showInstruction: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.closeAd(), this.addChild(new Instruction(this.width, this.height))
    },
    homeBtnFunction: function() {
        this.closeAd(), TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.close(), TGE.Game._sInstance.showManagedScreen("levelselection")
    },
    toggleSound: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1);
        var a = TGE.Game.GetInstance();
        a.audioEnabled = !a.audioEnabled, a.audioEnabled ? (this.soundBtn.setImage("unMute"), a.audioManager.Unmute()) : (this.soundBtn.setImage("mute"), a.audioManager.Mute())
    },
    setAudioImage: function() {
        var a = TGE.Game.GetInstance();
        a.audioEnabled ? this.soundBtn.setImage("unMute") : this.soundBtn.setImage("mute")
    },
    closeAd: function() {
        "undefined" != typeof this.mAd && null != this.mAd && (this.mAd.close(), this.mAd = null)
    },
    createAd: function() {
        this.mAd = TGE.Advertisement.DisplayAd({
            parentDiv: TGE.Game._sInstance.mCanvasDiv,
            adURL: GameConfig.ADSERVER_GAMEOVER_URL,
            adWidth: 300,
            adHeight: 250,
            x: .48 * this.width,
            y: .259 * this.height
        })
    },
    cardBackground: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("card_distribute", !1);
        var a = 0;
        this.adCount++, 4 == this.adCount && this.createAd(), 5 == this.adCount && (this.adCount = 0), console.log("Distributed new hand. Popup Count: " + this.adCount), this.winningHandPopup.setUp(this.betCount);
        for (var b = 0; b < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; b++) this.CardArray[b] = (new TGE.Sprite).setup({
            image: "cardBackground",
            x: this.percentageOfWidth(-.1),
            y: this.percentageOfHeight(.737)
        }), this.addChild(this.CardArray[b]), this.cardAnimation(b, a), a += .08
    },
    cardAnimation: function(a, b) {
        4 == a ? CWTween.to(this.CardArray[a], .1, {
            x: this.percentageOfWidth(.125) + this.xIncrement,
            y: this.percentageOfHeight(.737)
        }, {
            delay: .2 + b,
            onComplete: this.onCardAnimDone.bind(this)
        }) : CWTween.to(this.CardArray[a], .1, {
            x: this.percentageOfWidth(.125) + this.xIncrement,
            y: this.percentageOfHeight(.737)
        }, {
            delay: .2 + b
        }), this.xIncrement += TGE.Game._sInstance.gameData.inGameData.cardsInformation.differenceBtnTwoCards
    },
    onCardAnimDone: function() {
        CWTween.to(this, .1, {}, {
            delay: .2,
            onComplete: this.buttonsStatusAfterAnimation.bind(this)
        }), this.xIncrement = 0
    },
    showMiniGame: function() {
        var a = new MiniGame(this.stage.width, this.stage.height, this, this.winningAmt);
        this.addChild(a), a.setUp()
    },
    betPlusFunction: function() {
        if (!this.dealBtnClicked)
            if (TGE.Game._sInstance.mCreditAmt - this.betCount >= TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount && this.betCount < TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount) {
                TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.betCount += TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount, this.mBet.text = this.betCount, this.winningHandPopup.setUp(this.betCount);
                var a = (new TGE.Sprite).setup({
                    image: TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].coinImage,
                    x: this.percentageOfWidth(.1),
                    y: this.percentageOfHeight(.94)
                });
                this.addChild(a), CWTween.to(a, .2, {
                    x: this.percentageOfWidth(.4),
                    y: this.percentageOfHeight(.2),
                    scaleX: .5,
                    scaleY: .5
                }, {
                    ease: {
                        name: "Sine",
                        type: "Out"
                    },
                    onComplete: this.removeCoinAnimation.bind(this, a)
                }), this.coinBtn.mouseEnabled = !1, this.dealBtn.mouseEnabled = !1, this.betCount == TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount && (this.coinBtn.alpha = .3, this.coinGlow.alpha = 0, this.betMaxBtn.alpha = .3, this.stopCoinGlowAnimation(), this.coinBtn.mouseEnabled = !1, this.betMaxBtn.mouseEnabled = !1), this.betCount == TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount ? (this.betMinBtn.alpha = .3, this.betMinBtn.mouseEnabled = !1) : (this.betMinBtn.alpha = 1, this.betMinBtn.mouseEnabled = !0)
            } else(TGE.Game._sInstance.mCreditAmt < this.betCount || TGE.Game._sInstance.mCreditAmt < TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount) && (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.notEnoughChipsPopUpMessages())
    },
    removeCoinAnimation: function(a) {
        a.markForRemoval(), this.coinBtn.mouseEnabled = !0, this.dealBtn.mouseEnabled = !0
    },
    betMaxFunction: function() {
        this.dealBtnClicked || (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), TGE.Game._sInstance.mCreditAmt >= TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount ? (this.betCount = TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount, this.mBet.text = this.betCount, this.winningHandPopup.setUp(this.betCount), this.coinBtn.alpha = .3, this.coinGlow.alpha = 0, this.betMaxBtn.mouseEnabled = !1, this.betMaxBtn.alpha = .3, this.betMinBtn.alpha = 1, this.betMinBtn.mouseEnabled = !0, this.stopCoinGlowAnimation()) : this.notEnoughChipsPopUpMessages())
    },
    betMinFunction: function() {
        this.dealBtnClicked || (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), TGE.Game._sInstance.mCreditAmt >= TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount ? (this.betCount = TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount, this.mBet.text = this.betCount, this.winningHandPopup.setUp(this.betCount), this.coinBtn.alpha = 1, this.coinGlow.alpha = 1, this.coinGlowAnimation(), this.coinBtn.mouseEnabled = !0, this.betMaxBtn.mouseEnabled = !0, this.betMaxBtn.alpha = 1, this.betMinBtn.alpha = .3, this.betMinBtn.mouseEnabled = !1) : this.notEnoughChipsPopUpMessages())
    },
    dealBtnFunction: function() {
        if (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), TGE.Game._sInstance.mCreditAmt >= this.betCount)
            if (this.winningAmt = 0, this.mWinText.text = this.winningAmt, this.betCount > 0) {
                this.dealBtnClicked = !0, this.buttonsStatusWhileAnimation();
                for (var a = 0, b = this.CardArray.length; b > a; a++) this.CardArray[a].mouseEnabled = !0;
                TGE.Game._sInstance.mCreditAmt -= this.betCount, TGE.Game._sInstance.saveCredits(TGE.Game._sInstance.mCreditAmt), this.mCreditText.text = TGE.Game._sInstance.mCreditAmt, this.RandomNoArray = [], TGE.Game._sInstance.audioPlayer.playAudio("card_flip", !1);
                for (var a = 0; a < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; a++) this.RandomNoArray.push(this.cardDeckObj.generateRandomNumber(this.RandomNoArray)), this.displayCards(a, "deal"), 4 == a && (this.dealBtn.visible = !1, this.button_draw.visible = !0);
                if (1 == TGE.Game._sInstance.selectedLevel) {
                    this.displayHint = !0;
                    var c = this.sameKindCards();
                    null != c ? this.hintFunction(this.hintIndexArr) : this.displayHint = !1
                }
                CWTween.to(this, .1, {}, {
                    delay: 1.2,
                    onComplete: this.buttonsStatusAfterAnimation.bind(this, "deal")
                }), CWTween.to(this.dealBtn, .1, {}, {
                    delay: 1.2,
                    onComplete: this.enableCardClicked.bind(this)
                })
            } else this.addChild(new InGamePopup(this.width / 2, this.height / 2, "betpopup"));
        else this.notEnoughChipsPopUpMessages()
    },
    enableCardClicked: function() {
        this.disableCard = !1
    },
    notEnoughChipsPopUpMessages: function() {
        this.addChild(new NoChipsPopup(this.width, this.height, "mainGame"))
    },
    cardClicked: function(a) {
        if (0 == this.disableCard)
            if (0 == this.CardArray[a].clicked) {
                this.ingameTutorial && this.ingameTutorial.closePopup3(), this.CardArray[a].clicked = !0;
                var b = this.CardArray[a].x,
                    c = this.CardArray[a].y;
                this.CardArray[a].isLocked = this.addChild((new TGE.Sprite).setup({
                    image: "redBall",
                    x: b,
                    y: c
                })), this.CardArray[a].isLocked.alpha = .6, this.CardArray[a].lock = this.addChild((new TGE.Sprite).setup({
                    image: "lock",
                    x: b + 37,
                    y: c - 50
                })), CWTween.to(this.CardArray[a], .05, {
                    scaleX: .8,
                    scaleY: .8
                }, {
                    timeline: !0
                }), CWTween.to(this.CardArray[a], .05, {
                    scaleX: 1,
                    scaleY: 1
                }, {
                    timeline: !0
                }), TGE.Game._sInstance.audioPlayer.playAudio("lock1", !1)
            } else this.CardArray[a].clicked = !1, this.CardArray[a].isLocked.markForRemoval(), this.CardArray[a].lock.markForRemoval(), this.CardArray[a].isLocked = !1, this.CardArray[a].lock = !1, CWTween.to(this.CardArray[a], .05, {
                scaleX: .8,
                scaleY: .8
            }, {
                timeline: !0
            }), CWTween.to(this.CardArray[a], .05, {
                scaleX: 1,
                scaleY: 1
            }, {
                timeline: !0
            }), TGE.Game._sInstance.audioPlayer.playAudio("lock1", !1)
    },
    displayCards: function(a, b) {
        "draw" == b && (this.CardArray[a].setImage("cardBackground"), CWTween.to(this.CardArray[a], .1, {
            scaleX: 1
        }, {
            timeline: !0
        }), CWTween.to(this.CardArray[a], .1, {
            scaleX: 0
        }, {
            timeline: !0
        }));
        var c = this.cardDeckObj.getCardSuitRank(this.RandomNoArray[a]);
        this.CardArray[a].cardsuit = c.suit, this.CardArray[a].cardrank = c.rank, this.CardArray[a].cardcolor = c.color, this.CardArray[a].clicked = !1, this.CardArray[a].isLocked = !1, this.CardArray[a].lock = !1, this.CardArray[a].isFirsttime ? this.CardArray[a].setImage(this.CardArray[a].cardrank + this.CardArray[a].cardsuit) : (this.CardArray[a].isFirsttime = !0, this.CardArray[a].addEventListener("mousedown", this.cardClicked.bind(this, a)), this.CardArray[a].setImage(this.CardArray[a].cardrank + this.CardArray[a].cardsuit), this.addChild(this.CardArray[a])), "draw" == b ? CWTween.to(this.CardArray[a], .1, {
            scaleX: 1
        }, {
            timeline: !0
        }) : (this.CardArray[a].scaleX = 0, CWTween.to(this.CardArray[a], .1, {
            scaleX: 1
        }, {
            timeline: !0
        }));
        for (var d = 0; d < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; d++) this.tempCardRankArrtoCheckResult[d] = this.CardArray[d].cardrank
    },
    checkForJoker: function() {
        return this.jokerfoundInCardDeck = null, this.jokerfoundInCardDeck = this.tempCardRankArrtoCheckResult.indexOf(53), this.jokerfoundInCardDeck >= 0
    },
    checkResult: function() {
        this.finalResult = this.sameKindCards(), this.closeAd(), null != this.finalResult ? CWTween.to(this.winningHandPopup, .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            onComplete: this.decideWinningAmount.bind(this, this.finalResult)
        }) : (CWTween.to(this.winningHandPopup, .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            timeline: !0,
            onComplete: this.loseHand.bind(this, this.finalResult)
        }), CWTween.to(this, 1.5, {}, {
            onComplete: this.checkForLevelUp.bind(this, "mainGame")
        }), TGE.Game._sInstance.xp += 1, this.xpText.text = TGE.Game._sInstance.xp, TGE.Game._sInstance.saveXP(TGE.Game._sInstance.xp),dp_submitScores(this.xpText.text), (0 == TGE.Game._sInstance.mCreditAmt || TGE.Game._sInstance.mCreditAmt < this.betCount) && (this.mBet.text = 0, this.betCount = 0))
    },
    loseHand: function() {
        var a = Math.floor(3 * Math.random());
        this.loseHandText = (new TGE.Text).setup({
            text: this.loseMessage[a],
            font: "27px Market Deco",
            color: "#f9db15",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.41)
        }), this.addChild(this.loseHandText), this.loseHandText.alpha = 0, CWTween.to(this.loseHandText, .3, {
            alpha: 1
        }, {
            timeline: !0,
            ease: {
                name: "Back",
                type: "Out"
            }
        }), CWTween.to(this.loseHandText, .3, {}, {
            delay: 1.5,
            timeline: !0,
            onComplete: this.removeLoseMessage.bind(this)
        })
    },
    removeLoseMessage: function() {
        this.loseHandText.markForRemoval(), CWTween.to(this.winningHandPopup, .5, {
            scaleX: 1,
            scaleY: 1
        }, {
            timeline: !0
        })
    },
    sameSuit: function() {
        var a = null;
        if (3 == TGE.Game._sInstance.selectedLevel) {
            var b = this.checkForJoker();
            if (1 == b) {
                var c = this.tempCardRankArrtoCheckResult.indexOf(53),
                    d = c > 0 ? c - 1 : c + 1;
                this.CardArray[c].cardsuit = this.CardArray[d].cardsuit
            }
        }
        for (var e = 0; e < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; e++) {
            if (this.CardArray[0].cardsuit != this.CardArray[e].cardsuit) {
                a = null;
                break
            }
            a = "flush"
        }
        var f = this.straight(a);
        return null != f ? 1 == TGE.Game._sInstance.selectedLevel && 1 == this.dealBtnClicked ? (this.hintIndexArr = this.CardArray, f) : f : null != a && 1 == TGE.Game._sInstance.selectedLevel && 1 == this.dealBtnClicked ? (this.hintIndexArr = this.CardArray, a) : a
    },
    straight: function(a) {
        var b = null,
            c = 0,
            d = 0,
            e = this.arrangeNumbersInAscendingOrder();
        if (3 == TGE.Game._sInstance.selectedLevel) {
            var f = this.checkForJoker();
            1 == f && (e[e.length - 1] = e[e.length - 2] + 1)
        }
        for (var g = 0, h = e.length; h - 1 > g; g++) e[g] == e[g + 1] - 1 ? d++ : 1 == f && 1 > c && e[g] + 2 == e[g + 1] && (c += 1, d++);
        b = 4 == d ? "straight" : null;
        for (var i = 0, g = 0; 5 > g; g++) {
            for (var j = 0; 5 > j; j++) this.CardArray[g].cardrank == this.CardArray[j].cardrank && i++;
            2 > i && (i = 0)
        }
        for (var k = 0, g = 0; 5 > g; g++)(1 == e[g] || e[g] > 9 && e[g] < 15) && 2 > i ? k += 1 : k = 0;
        return 5 == k ? null != a ? 1 == f ? "wildroyalflush" : "royalFlush" : "straight" : "straight" == b && null != a ? "straightFlush" : "straight" == b ? b : void 0
    },
    arrangeNumbersInAscendingOrder: function() {
        for (var a, b = [], c = 0, d = this.CardArray.length; d > c; c++) b[c] = this.CardArray[c].cardrank;
        for (var c = 0, d = b.length; d > c; c++)
            for (var e = 0, f = b.length; f > e; e++) b[c] < b[e] && (a = b[c], b[c] = b[e], b[e] = a);
        return b
    },
    sameKindCards: function() {
        var a = null,
            b = null,
            c = null,
            d = 0;
        if (3 == TGE.Game._sInstance.selectedLevel) {
            var e = this.checkForJoker();
            if (1 == e) {
                this.tempCardRankArrtoCheckResult.indexOf(53)
            }
        }
        for (var f = 0; 5 > f; f++) this.CardArray[f].cardCounter = 0;
        for (var g = 0; 5 > g; g++)
            for (var h = 0; 5 > h; h++) this.CardArray[g].cardrank == this.CardArray[h].cardrank && this.CardArray[g].cardCounter++;
        for (var i = 0; 5 > i; i++) 4 == this.CardArray[i].cardCounter ? (1 == TGE.Game._sInstance.selectedLevel && 1 == this.dealBtnClicked && this.hintIndexArr.push(this.CardArray[i]), c = 1 == e ? "fiveOfAkind" : "fourOfAkind") : 3 == this.CardArray[i].cardCounter ? (1 == TGE.Game._sInstance.selectedLevel && 1 == this.dealBtnClicked && this.hintIndexArr.push(this.CardArray[i]), 1 == e ? c = "fourOfAkind" : a = "threeOfAkind") : 2 == this.CardArray[i].cardCounter && (d++, 1 == TGE.Game._sInstance.selectedLevel && 1 == this.dealBtnClicked && this.hintIndexArr.push(this.CardArray[i]), this.CardArray[i].cardrank >= 11 && this.CardArray[i].cardrank <= 13 || 1 == this.CardArray[i].cardrank ? 1 == e && 4 == d ? c = "fullHouse" : 1 == e && 2 == d ? c = "threeOfAkind" : 2 == d ? b = "jackorbetter" : 4 == d && (b = "twoPair") : 1 == e && 4 == d ? c = "fullHouse" : 1 == e && 2 == d ? c = "threeOfAkind" : 2 == d ? b = "pair" : 4 == d && (b = "twoPair"));
        if (3 == TGE.Game._sInstance.selectedLevel)
            for (var i = 0; i < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; i++)
                if ((this.CardArray[i].cardrank >= 11 && this.CardArray[i].cardrank <= 13 || 1 == this.CardArray[i].cardrank) && 1 == this.CardArray[i].cardCounter && 1 == e && null == c && null == b) {
                    c = "pairOfJackOrMore";
                    break
                }
                "threeOfAkind" != a || "pair" != b && "jackorbetter" != b ? "threeOfAkind" == a && null == b ? c = "threeOfAkind" : null == a && "jackorbetter" == b ? c = "pairOfJackOrMore" : null == a && "twoPair" == b ? c = "twoPair" : null != a || "jackorbetter" != b && "twoPair" != b || (c = "twoPair") : c = "fullHouse";
        var j = this.sameSuit();
        return null != j && ("royalFlush" == j || "straightFlush" == j || "wildroyalflush" == j ? c = j : "flush" != j && "straight" != j || "fourOfAkind" == c || "fullHouse" == c || "fiveOfAkind" == c || (c = j)), null != c ? c : (this.hintIndexArr = null, this.hintIndexArr = [], void 0)
    },
    hintFunction: function(a) {
        if (1 == this.displayHint)
            for (var b = 0, c = a.length; c > b; b++) {
                var d = a[b].x,
                    e = a[b].y - 110;
                this.hintImage.push((new TGE.Sprite).setup({
                    image: "clickme",
                    x: d,
                    y: e
                })), this.addChild(this.hintImage[b]), this.hintImage[b].scaleX = this.hintImage[b].scaleY = .3, CWTween.from(this.hintImage[b], .3, {
                    y: e + 10
                }, {
                    reverse: !0
                })
            }
    },
    drawFunction: function() {
        if (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.dealBtnClicked = !1, this.buttonsStatusWhileAnimation(), 1 == this.displayHint) {
            for (var a = 0, b = this.hintImage.length; b > a; a++) this.hintImage[a].markForRemoval();
            this.displayHint = !1, this.hintImage = null, this.hintImage = [], this.hintIndexArr = null, this.hintIndexArr = []
        }
        for (var a = 0; a < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; a++) this.CardArray[a].clicked ? (this.CardArray[a].isLocked.markForRemoval(), this.CardArray[a].lock.markForRemoval(), this.CardArray[a].isLocked = !1, this.CardArray[a].clicked = !1, this.CardArray[a].lock = !1) : (this.RandomNoArray[a] = this.cardDeckObj.generateRandomNumber(this.RandomNoArray), CWTween.to(this.CardArray[a], .1, {
            scaleX: 0
        }, {
            delay: .1,
            timeline: !0,
            onComplete: this.displayCards.bind(this, a, "draw")
        }), TGE.Game._sInstance.audioPlayer.playAudio("card_flip", !1));
        CWTween.to(this, 1, {}, {
            timeline: !0,
            onComplete: this.checkResult.bind(this)
        }), this.button_draw.visible = !1, this.dealBtn.visible = !0, this.disableCard = !0
    },
    checkForLevelUp: function(a) {
        this.winningHandText && this.winningHandText.markedForRemoval(), TGE.Game._sInstance.xp >= 500 && TGE.Game._sInstance.currentLevelNo < 2 ? (this.updateLevelBadgeData(), TGE.Game._sInstance.saveHighestLevelUnlock(2), this.levelUpPopup(2)) : TGE.Game._sInstance.xp >= 2500 && TGE.Game._sInstance.currentLevelNo < 3 ? (this.updateLevelBadgeData(), TGE.Game._sInstance.saveHighestLevelUnlock(3), this.levelUpPopup(3)) : "miniGame" == a ? this.cardBackground() : this.removeCardsAfterDraw()
    },
    levelUpPopup: function(a) {
        var b = new Popup(this.width, this.height, a, this);
        this.addChild(b)
    },
    updateLevelBadgeData: function() {
        TGE.Game._sInstance.levelBadgeCounter++, TGE.Game._sInstance.saveLevelBadgeCounter(TGE.Game._sInstance.levelBadgeCounter)
    },
    updateChipsBadgeData: function() {
        return TGE.Game._sInstance.mCreditAmt >= TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.OneThousandChips && TGE.Game._sInstance.mCreditAmt < TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.fiveThousandChips && TGE.Game._sInstance.chipsBadgeCounter < 1 ? (TGE.Game._sInstance.chipsBadgeCounter = 1, TGE.Game._sInstance.saveChipsBadgeCounter(TGE.Game._sInstance.chipsBadgeCounter), !0) : TGE.Game._sInstance.mCreditAmt >= TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.fiveThousandChips && TGE.Game._sInstance.mCreditAmt < TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.tenThousandChips && TGE.Game._sInstance.chipsBadgeCounter < 2 ? (TGE.Game._sInstance.chipsBadgeCounter = 2, TGE.Game._sInstance.saveChipsBadgeCounter(TGE.Game._sInstance.chipsBadgeCounter), !0) : TGE.Game._sInstance.mCreditAmt >= TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.tenThousandChips && TGE.Game._sInstance.chipsBadgeCounter < 3 ? (TGE.Game._sInstance.chipsBadgeCounter = 3, TGE.Game._sInstance.saveChipsBadgeCounter(TGE.Game._sInstance.chipsBadgeCounter), !0) : !1
    },
    decideWinningAmount: function(a) {
        if ("pairOfJackOrMore" == a) {
            var b = this.betCount;
            if (1 == this.betCount) var c = "YOU WON " + b + " CHIP & " + b + " xp";
            else var c = "YOU WON " + b + " CHIPS & " + b + " xp"
        } else var b = TGE.Game._sInstance.gameData.inGameData.winningHandAmount[a] * this.betCount,
            c = "YOU WON " + b + " CHIPS & " + b + " xp";
        this.winningAmt += b, TGE.Game._sInstance.mCreditAmt += b, TGE.Game._sInstance.saveCredits(TGE.Game._sInstance.mCreditAmt), this.mWinText.text = this.winningAmt, this.mCreditText.text = TGE.Game._sInstance.mCreditAmt, TGE.Game._sInstance.xp += b, this.xpText.text = TGE.Game._sInstance.xp, TGE.Game._sInstance.saveXP(TGE.Game._sInstance.xp), Math.round(1e3 / TGE.Game._sInstance._mFrameTime).toFixed(0) > 15 && (this.fireWork = new SparkleEffect(this.percentageOfWidth(.5), this.percentageOfHeight(.4), "" + TGE.Game._sInstance.gameData.inGameData.winningResultFireworks[a], 1), this.addChild(this.fireWork), CWTween.to(this.fireWork, .3, {}, {})), this.winningHandText = (new TGE.Sprite).setup({
            image: TGE.Game._sInstance.gameData.inGameData.winningHandTextImages[a],
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.4)
        }), this.addChild(this.winningHandText), this.winningAmountText = (new TGE.Text).setup({
            text: "" + c,
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.winningHandText.percentageOfWidth(0),
            y: this.winningHandText.percentageOfHeight(.5)
        }), this.winningHandText.addChild(this.winningAmountText), this.winningHandText.scaleX = this.winningHandText.scaleY = 0, this.chipsBadgeReasult = this.updateChipsBadgeData(), CWTween.to(this.winningHandText, .3, {
            scaleX: 1,
            scaleY: 1
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.delayInRemoveWinningText.bind(this)
        }), TGE.Game._sInstance.audioPlayer.playAudio("win01", !1), (0 == TGE.Game._sInstance.mCreditAmt || TGE.Game._sInstance.mCreditAmt < this.betCount) && (this.mBet.text = TGE.Game._sInstance.mCreditAmt, this.betCount = 0)
    },
    delayInRemoveWinningText: function() {
        this.chipsBadgeReasult ? CWTween.to(this.winningHandText, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            delay: 1,
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.checkForChipsBadgeResult.bind(this)
        }) : CWTween.to(this.winningHandText, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            delay: 1,
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.removeTextAndCallMiniGameOrCheckForLevelUp.bind(this)
        })
    },
    checkForChipsBadgeResult: function() {
        if (this.winningHandText.markForRemoval(), this.fireWork && (this.fireWork.markForRemoval(), this.fireWork = null), this.chipsBadgeReasult) {
            if (this.chipsWinningBadge = (new TGE.Sprite).setup({
                image: "chipsBadge" + TGE.Game._sInstance.chipsBadgeCounter,
                alpha: 1,
                x: this.percentageOfWidth(.5),
                y: this.percentageOfHeight(.42)
            }), this.addChild(this.chipsWinningBadge), this.congratsText = (new TGE.Text).setup({
                text: "恭喜!",
                font: "25px Market Deco",
                color: "#f9db15",
                x: this.percentageOfWidth(0),
                y: this.percentageOfHeight(-.15)
            }), this.chipsWinningBadge.addChild(this.congratsText), 1 == TGE.Game._sInstance.chipsBadgeCounter) var a = TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.OneThousandChips;
            else if (2 == TGE.Game._sInstance.chipsBadgeCounter) var a = TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.fiveThousandChips;
            else var a = TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.tenThousandChips;
            this.text = (new TGE.Text).setup({
                text: "你已经实现了 " + a + " 筹码成就",
                font: "25px Market Deco",
                color: "#f9db15",
                x: this.percentageOfWidth(0),
                y: this.percentageOfHeight(.15)
            }), this.chipsWinningBadge.addChild(this.text), this.chipsWinningBadge.scaleX = this.chipsWinningBadge.scaleY = 0, CWTween.to(this.chipsWinningBadge, 1, {
                scaleX: 1,
                scaleY: 1
            }, {
                ease: {
                    name: "Back",
                    type: "Out"
                },
                onComplete: this.removeBadgesText.bind(this)
            })
        }
    },
    removeBadgesText: function() {
        CWTween.to(this.chipsWinningBadge, 1, {
            scaleX: 0,
            scaleY: 0
        }, {
            delay: 1,
            ease: {
                name: "Back",
                type: "InOut"
            },
            onComplete: this.removeTextAndCallMiniGameOrCheckForLevelUp.bind(this)
        })
    },
    removeTextAndCallMiniGameOrCheckForLevelUp: function() {
        this.winningHandText && this.winningHandText.markForRemoval(), this.chipsBadgeReasult && this.chipsWinningBadge.markForRemoval(), 2 == TGE.Game._sInstance.selectedLevel ? this.addChild(new InGamePopup(this.width / 2, this.height / 2, "miniGame")) : CWTween.to(this, 1, {}, {
            onComplete: this.checkForLevelUp.bind(this, "mainGame")
        }), CWTween.to(this.winningHandPopup, 1, {
            scaleX: 1,
            scaleY: 1
        }, {
            delay: 1.8,
            ease: {
                name: "Back",
                type: "InOut"
            },
            onComplete: this.buttonsStatusAfterAnimation.bind(this)
        })
    },
    removeCardsAfterDraw: function() {
        for (var a = .02, b = 4; b >= 0; b--) CWTween.to(this.CardArray[b], .5, {
            x: this.percentageOfWidth(1.5)
        }, {
            delay: a,
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.removeCardsAnimation.bind(this, b)
        }), a += a
    },
    removeCardsAnimation: function(a) {
        this.CardArray[a].markForRemoval(), 0 == a && CWTween.to(this, 0, {}, {
            onComplete: this.cardBackground.bind(this)
        })
    },
    buttonsStatusWhileAnimation: function() {
        this.dealBtn.mouseEnabled = !1, this.button_draw.mouseEnabled = !1, this.betMinBtn.mouseEnabled = !1, this.betMaxBtn.mouseEnabled = !1, this.coinBtn.mouseEnabled = !1, this.helpBtn.mouseEnabled = !1, this.soundBtn.mouseEnabled = !1, this.homebtn.mouseEnabled = !1, this.dealBtn.alpha = .3, this.betMinBtn.alpha = .3, this.coinBtn.alpha = .3, this.betMaxBtn.alpha = .3, this.helpBtn.alpha = .3, this.homebtn.alpha = .3, this.soundBtn.alpha = .3, this.button_draw.alpha = .3
    },
    buttonsStatusAfterAnimation: function(a) {
        this.dealBtn.mouseEnabled = !0, this.button_draw.mouseEnabled = !0, this.betMinBtn.mouseEnabled = !0, this.betMaxBtn.mouseEnabled = !0, this.coinBtn.mouseEnabled = !0, this.helpBtn.mouseEnabled = !0, this.soundBtn.mouseEnabled = !0, "deal" == a ? (this.betMinBtn.alpha = .3, this.coinBtn.alpha = .3, this.betMaxBtn.alpha = .3, this.homebtn.alpha = .3) : (this.betCount == TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount ? (this.betMaxBtn.alpha = .3, this.coinBtn.alpha = .3, this.betMinBtn.alpha = 1, this.betMaxBtn.mouseEnabled = !1, this.coinBtn.mouseEnabled = !1, this.betMinBtn.mouseEnabled = !0) : this.betCount == TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount ? (this.betMinBtn.mouseEnabled = !1, this.betMinBtn.alpha = .3, this.coinBtn.mouseEnabled = !0, this.betMaxBtn.mouseEnabled = !0, this.coinBtn.alpha = 1, this.betMaxBtn.alpha = 1) : (this.betMinBtn.alpha = 1, this.coinBtn.alpha = 1, this.betMaxBtn.alpha = 1, this.betMinBtn.mouseEnabled = !0), this.homebtn.alpha = 1, this.homebtn.mouseEnabled = !0), this.dealBtn.alpha = 1, this.helpBtn.alpha = 1, this.soundBtn.alpha = 1, this.button_draw.alpha = 1
    }
}, extend(MainGameScreen, TGE.Window), MiniGame = function(a, b, c, d) {
    MiniGame.superclass.constructor.apply(this, arguments), this.parentObject = c, this.isAnimationComplete = !1, this.decreaseWinningAmount = !0, this.winAmount = d
}, MiniGame.prototype = {
    setUp: function() {
        this.card, this.isButtonEnable = !0, this.miniGameBg = (new TGE.Sprite).setup({
            image: "minigamePopup",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        }), this.addChild(this.miniGameBg), this.mLoadingText = (new TGE.Text).setup({
            text: "猜一猜牌的颜色",
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(-.2)
        }), this.miniGameBg.addChild(this.mLoadingText), this.winAmountText = (new TGE.Text).setup({
            text: "奖金额: " + this.parentObject.winningAmt,
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(-.25)
        }), this.miniGameBg.addChild(this.winAmountText), this.cardBg = (new TGE.Sprite).setup({
            image: "cardBackground",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(0)
        }), this.miniGameBg.addChild(this.cardBg), this.redBtn = (new TGE.Button).setup({
            image: "red",
            x: this.percentageOfWidth(-.2),
            y: this.percentageOfHeight(.2),
            numStates: 1,
            pressFunction: MiniGame.prototype.redBtnClicked.bind(this)
        }), this.miniGameBg.addChild(this.redBtn), this.blackBtn = (new TGE.Button).setup({
            image: "black",
            x: this.percentageOfWidth(.2),
            y: this.percentageOfHeight(.2),
            numStates: 1,
            pressFunction: MiniGame.prototype.blackBtnClick.bind(this)
        }), this.miniGameBg.addChild(this.blackBtn), CWTween.from(this.miniGameBg, .8, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.onAnimationComplete.bind(this)
        })
    },
    onAnimationComplete: function() {
        this.isAnimationComplete = !0
    },
    redBtnClicked: function() {
        this.isButtonEnable && (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.redBtn.mouseEnabled = !1, this.randomCard(), CWTween.to(this.cardBg, 1, {
            scaleX: 0,
            scaleY: 0,
            rotation: -360
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.cardAnimation.bind(this, "red")
        }), this.isButtonEnable = !1)
    },
    blackBtnClick: function() {
        this.isButtonEnable && (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.blackBtn.mouseEnabled = !1, this.randomCard(), CWTween.to(this.cardBg, 1, {
            scaleX: 0,
            scaleY: 0,
            rotation: -360
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: .2,
            onComplete: this.cardAnimation.bind(this, "black")
        }), this.isButtonEnable = !1)
    },
    cardAnimation: function(a) {
        this.cardBg.setImage(this.card.rank + this.card.suit), CWTween.to(this.cardBg, 1, {
            scaleX: 1,
            scaleY: 1,
            rotation: 360
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: .2,
            onComplete: this.onCardAnimationComplete.bind(this, a)
        })
    },
    onCardAnimationComplete: function(a) {
        CWTween.to(this, 1, {}, {
            onComplete: this.showResult.bind(this, a)
        });
        var b = this.miniGameBg.addChild((new TGE.Sprite).setup({
            image: "redBall",
            x: this.cardBg.x,
            y: this.cardBg.y
        }));
        CWTween.from(b, .8, {
            alpha: 0
        }, {
            reverse: !0
        }), this.isAnimationComplete = !0, this.isButtonEnable = !1
    },
    randomCard: function() {
        var a = [];
        this.cardDeckObj = new CardDeck(TGE.Game._sInstance.levelConfig.levelData.level_2.numberOfCards);
        var a = this.cardDeckObj.generateRandomNumber(a);
        this.card = this.cardDeckObj.getCardSuitRank(a)
    },
    playAgain: function() {
        this.removeSmallPopup(), this.popup_bg = (new TGE.Sprite).setup({
            image: "smallPopup",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        }), this.addChild(this.popup_bg), this.popup_bg.addChild((new TGE.Text).setup({
            text: "你需要让你的奖金额再增加一倍？",
            font: "21px Market Deco",
            color: "#f9db15",
            x: this.popup_bg.percentageOfWidth(0),
            y: this.popup_bg.percentageOfHeight(-.1)
        })), this.yesBtn = (new TGE.Button).setup({
            image: "yesbtn",
            x: this.popup_bg.percentageOfWidth(-.15),
            y: this.popup_bg.percentageOfHeight(.15),
            numStates: 1,
            pressFunction: MiniGame.prototype.yesPlayAgainAnimation.bind(this)
        }), this.popup_bg.addChild(this.yesBtn), this.noBtn = (new TGE.Button).setup({
            image: "nobtn",
            x: this.popup_bg.percentageOfWidth(.15),
            y: this.popup_bg.percentageOfHeight(.15),
            numStates: 1,
            pressFunction: MiniGame.prototype.noButtonClicked.bind(this)
        }), this.popup_bg.addChild(this.noBtn), CWTween.from(this.popup_bg, 1, {
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(1)
        }, {
            ease: {
                name: "Elastic",
                type: "Out"
            }
        })
    },
    yesPlayAgainAnimation: function() {
        this.yesBtn.mouseEnabled = !1, TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.popup_bg, .1, {
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(2)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: .5,
            onComplete: this.yesPlayAgainMiniGame.bind(this)
        })
    },
    yesPlayAgainMiniGame: function() {
        this.popup_bg.markForRemoval(), this.miniGameBg.markForRemoval(), this.cardBg.markForRemoval(), this.setUp()
    },
    noButtonClicked: function() {
        this.noBtn.mouseEnabled = !1, TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.popup_bg, .1, {
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(2)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: .5,
            onComplete: this.noStopMiniGame.bind(this)
        })
    },
    noStopMiniGame: function() {
        CWTween.to(this.miniGameBg, .8, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.checkLevelUp.bind(this)
        })
    },
    showResult: function(a) {
        this.isAnimationComplete && (this.card.color == a ? (this.message = "You have Doubled your winning amount.", this.resultAnimation("win")) : (this.message = "Sorry!! your winning amount is 0", this.resultAnimation("lose"))), this.isAnimationComplete = !1
    },
    resultAnimation: function(a) {
        this.smallPopup = (new TGE.Sprite).setup({
            image: "smallPopup",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        }), this.addChild(this.smallPopup);
        var b = (new TGE.Text).setup({
            text: "" + this.message,
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.smallPopup.percentageOfWidth(0),
            y: this.smallPopup.percentageOfHeight(0)
        });
        this.smallPopup.addChild(b), "win" == a ? (TGE.Game._sInstance.audioPlayer.playAudio("win01", !1), null != this.fireWork && this.removeChild(this.fireWork), this.fireWork = null, this.fireWork = new SparkleEffect(this.cardBg.x, this.cardBg.y, "wintextstar", 2), this.miniGameBg.addChild(this.fireWork), CWTween.from(this.smallPopup, 1, {
            scaleX: 0,
            scaleY: 0,
            rotation: 360
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: .5,
            onComplete: this.removeAnimationWinMessage.bind(this)
        }), this.parentObject.winningAmt += this.parentObject.winningAmt, this.parentObject.mWinText.text = this.parentObject.winningAmt, this.winAmountText.text = "Win Amount : " + this.parentObject.winningAmt) : (CWTween.from(this.smallPopup, 1, {
            scaleX: 0,
            scaleY: 0,
            rotation: 360
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: 1,
            onComplete: this.removeAnimationLose.bind(this)
        }), this.winAmountText.text = "Win Amount : 0")
    },
    removeSmallPopup: function() {
        this.smallPopup.markForRemoval()
    },
    removeAnimationWinMessage: function() {
        CWTween.to(this.smallPopup, 1, {
            scaleX: 0,
            scaleY: 0,
            rotation: -360
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: 1,
            onComplete: this.onWinAnimationComplete.bind(this)
        })
    },
    removeAnimationLose: function() {
        CWTween.to(this.smallPopup, 1, {
            scaleX: 0,
            scaleY: 0,
            rotation: -360
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            delay: 1,
            onComplete: this.onLoseAnimationComplete.bind(this)
        })
    },
    onWinAnimationComplete: function() {
        1 == this.decreaseWinningAmount && (TGE.Game._sInstance.mCreditAmt -= this.winAmount, this.decreaseWinningAmount = !1), TGE.Game._sInstance.mCreditAmt += this.parentObject.winningAmt, this.parentObject.mCreditText.text = TGE.Game._sInstance.mCreditAmt, TGE.Game._sInstance.saveCredits(TGE.Game._sInstance.mCreditAmt), CWTween.from(this.smallPopup, .5, {
            scaleX: 0,
            scaleY: 0,
            rotation: 360
        }, {
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.playAgain.bind(this)
        })
    },
    checkLevelUp: function() {
        CWTween.to(this.miniGameBg, .5, {}, {
            timeline: !0,
            onComplete: this.parent.mainGameScreenAfterMiniGame.bind(this.parent)
        }), CWTween.to(this.miniGameBg, 1.5, {}, {
            timeline: !0,
            onComplete: this.parent.checkForLevelUp.bind(this.parent, "miniGame")
        }), this.close()
    },
    onLoseAnimationComplete: function() {
        TGE.Game._sInstance.mCreditAmt -= this.parentObject.winningAmt, this.parentObject.mCreditText.text = TGE.Game._sInstance.mCreditAmt, this.parentObject.winningAmt = 0, this.parentObject.mWinText.text = this.parentObject.winningAmt, TGE.Game._sInstance.saveCredits(TGE.Game._sInstance.mCreditAmt), CWTween.to(this, .2, {}, {
            onComplete: this.checkLevelUp.bind(this)
        })
    }
}, extend(MiniGame, TGE.Window), LevelSelection = function() {
    LevelSelection.superclass.constructor.apply(this, arguments), this.init(!0)
}, LevelSelection.prototype = {
    init: function(a) {
        this.addChild((new TGE.Sprite).setup({
            image: "gameScreenBg",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        })), this.background = (new TGE.Sprite).setup({
            image: "menuAndInstructions",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        }), this.addChild(this.background), this.menuHeadingTextImage = (new TGE.Sprite).setup({
            image: "menu",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(-.38)
        }), this.background.addChild(this.menuHeadingTextImage), this.upperTabsForMenuImage = (new TGE.Sprite).setup({
            image: "upperTabsForMenu",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(-.25)
        }), this.background.addChild(this.upperTabsForMenuImage), this.creditTextImage = (new TGE.Text).setup({
            text: "你的筹码:",
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(.27),
            y: this.percentageOfHeight(-.31)
        }), this.background.addChild(this.creditTextImage), this.xpTextImage = (new TGE.Text).setup({
            text: "总积分:",
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.27),
            y: this.percentageOfHeight(-.31)
        }), this.background.addChild(this.xpTextImage), this.creditText = (new TGE.Text).setup({
            text: "" + TGE.Game._sInstance.mCreditAmt,
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(.27),
            y: this.percentageOfHeight(-.25)
        }), this.background.addChild(this.creditText), this.xpText = (new TGE.Text).setup({
            text: "" + TGE.Game._sInstance.xp,
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.27),
            y: this.percentageOfHeight(-.25)
        }), this.background.addChild(this.xpText), this.menu0 = (new TGE.Sprite).setup({
            image: "menuText",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.4)
        }), this.addChild(this.menu0), this.menu0.addChild((new TGE.Sprite).setup({
            image: "buyMoreChipsGlow",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(0)
        })), this.buyMoreChipstext = (new TGE.Text).setup({
            text: "购买筹码",
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.08),
            y: this.percentageOfHeight(-.002)
        }), this.menu0.addChild(this.buyMoreChipstext), this.buyMoreChipsButton = (new TGE.Button).setup({
            image: "buyWithGlow",
            x: this.menu0.percentageOfWidth(.39),
            y: 2,
            numStates: 1,
            looping: !0,
            pressFunction: LevelSelection.prototype.buyMore.bind(this)
        }), this.menu0.addChild(this.buyMoreChipsButton);
        for (var b = 0, c = 1; 5 > c; c++) this["menu" + c] = (new TGE.Sprite).setup({
            image: "menuText",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.55 + b)
        }), this.addChild(this["menu" + c]), b += .12;
        this.level1text = (new TGE.Text).setup({
            text: "等级1",
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.08),
            y: this.percentageOfHeight(-.002)
        }), this.level2text = (new TGE.Text).setup({
            text: "等级2 / 解锁500积分",
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.08),
            y: this.percentageOfHeight(-.002)
        }), this.level3text = (new TGE.Text).setup({
            text: "等级3 / 解锁2500积分",
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.08),
            y: this.percentageOfHeight(-.002)
        }), this.level4text = (new TGE.Text).setup({
            text: "锦标赛 (即将推出)",
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.08),
            y: this.percentageOfHeight(-.002)
        });
        for (var c = 1; c <= TGE.Game._sInstance.currentLevelNo; c++) this["play" + c] = (new TGE.Button).setup({
            image: "playWithGlow",
            x: this["menu" + c].percentageOfWidth(.39),
            y: 2,
            numStates: 1,
            pressFunction: LevelSelection.prototype.validateLevelSelection.bind(this, c)
        }), this["menu" + c].addChild(this["play" + c]), this["level" + c + "text"].text = "LEVEL " + c;
        this.levelUnlocked = (new TGE.Sprite).setup({
            image: "unlockLevel",
            x: 0,
            y: 0
        }), this["menu" + TGE.Game._sInstance.currentLevelNo].addChild(this.levelUnlocked), this.levelUnlocked.alpha = 0, this.menu1.addChild(this.level1text), this.menu2.addChild(this.level2text), this.menu3.addChild(this.level3text), this.menu4.addChild(this.level4text);
        for (var c = TGE.Game._sInstance.currentLevelNo + 1; 4 >= c; c++) this["buyBtn" + c] = (new TGE.Button).setup({
            image: "buyWithGlow",
            x: this["menu" + c].percentageOfWidth(.39),
            y: 2,
            numStates: 1,
            pressFunction: LevelSelection.prototype.buyMore1.bind(this)
        }), this["menu" + c].addChild(this["buyBtn" + c]), c >= TGE.Game._sInstance.currentLevelNo + 2 && (this["buyBtn" + c].mouseEnabled = !1, this["buyBtn" + c].alpha = .2, this["level" + c + "text"].alpha = .2), 4 == c && (this["buyBtn" + c].mouseEnabled = !1, this["buyBtn" + c].alpha = .2);
        if (this.background.addChild((new TGE.Button).setup({
            image: "badgesWithGlow",
            x: this.percentageOfWidth(-.4),
            y: this.percentageOfHeight(-.4),
            numStates: 1,
            pressFunction: this.badges.bind(this)
        })), this.background.addChild((new TGE.Button).setup({
            image: "help",
            x: this.percentageOfWidth(.4),
            y: this.percentageOfHeight(-.4),
            numStates: 1,
            pressFunction: this.showInstruction.bind(this)
        })), a) {
            CWTween.from(this.background, .4, {
                alpha: 0,
                x: this.percentageOfHeight(-.5)
            }, {
                ease: {
                    name: "Back",
                    type: "Out"
                }
            });
            for (var d = .6, c = 4; c >= 0; c--) CWTween.from(this["menu" + c], .3, {
                scaleX: .6,
                scaleY: .6,
                alpha: 0
            }, {
                delay: d,
                ease: {
                    name: "Back",
                    type: "Out",
                    params: 4
                }
            }), d -= .1
        }
        CWTween.to(this.levelUnlocked, .5, {
            alpha: 1
        }, {
            reverse: !0
        }), this.checkToAllocateChips()
    },
    showInstruction: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.addChild(new Instruction(this.width, this.height))
    },
    validateLevelSelection: function(a) {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), 4 == a ? this.addChild(new InGamePopup(this.width / 2, this.height / 2, "levelSelection")) : a <= TGE.Game._sInstance.currentLevelNo && this.close(TGE.Game.GetInstance().startMainGame(a))
    },
    buyMore1: function() {
        this.addChild(new BuyLevelConfirmation(!0)), TGE.Game._sInstance.audioPlayer.playAudio("button", !1)
    },
    buyMore: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.addChild(new BuyMoreChipsPopUp(this.width, this.height, "levelScreen"))
    },
    badges: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.addChild(new BadgesPopUp(this.width, this.height, this))
    },
    onLevelBuySucess: function() {
        this.clearChildren(), console.log(this["menu" + TGE.Game._sInstance.currentLevelNo]), this.init(!1)
    },
    checkToAllocateChips: function() {
        TGS.IsReady() ? (TGE.Game.GetInstance().onDatastoreUpdated(), TGS.GetDateTime(this.success.bind(this))) : TGS.onReady = this.checkTGSReady.bind(this)
    },
    checkTGSReady: function() {
        this.checkToAllocateChips()
    },
    success: function(a) {
        var b = a,
            c = TGS.DataStore.FetchStringValue("currentDate", b),
            d = new Date(c),
            e = new Date(b);
        (e.getDate() > d.getDate() || e.getMonth() > d.getMonth() || e.getYear() > d.getYear()) && (TGE.Game.GetInstance().mCreditAmt += 100, this.creditText.text = TGE.Game.GetInstance().mCreditAmt, this.addChild(new InGamePopup(this.width / 2, this.height / 2, "dailyBonus")), TGS.DataStore.SaveValues({
            credits: TGE.Game.GetInstance().mCreditAmt
        }), TGS.DataStore.SaveValues({
            currentDate: b
        })), c == b && TGS.DataStore.SaveValues({
            currentDate: b
        })
    }
}, extend(LevelSelection, TGE.Window), BuyMoreChipsPopUp = function(a, b, c) {
    BuyMoreChipsPopUp.superclass.constructor.apply(this, arguments), this.screenRef = c, TGS.IsReady() && TGS.MicrotransactionsSupported() ? this.createBuyMenu() : this.createSorryMessage()
}, BuyMoreChipsPopUp.prototype = {
    createBuyMenu: function() {
        this.addChild((new TGE.Sprite).setup({
            image: "gameScreenBg",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        })), this.buyPopup = (new TGE.Sprite).setup({
            image: "buyPopup",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        }), this.addChild(this.buyPopup), this.close_btn = (new TGE.Button).setup({
            image: "close",
            x: this.percentageOfWidth(.4),
            y: this.percentageOfHeight(-.36),
            numStates: 1,
            pressFunction: this.closeButton.bind(this)
        }), this.buyPopup.addChild(this.close_btn), CWTween.from(this.buyPopup, .2, {
            scaleX: .6,
            scaleY: .6
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        });
        for (var a = [100, 500, 1e3, 2e3, 2e3], b = 0, c = 0, d = 0; d < TGE.Game._sInstance.gameData.inGameData.buyMoreChips.noOfMenu - 1; d++) this["menu" + d] = (new TGE.Sprite).setup({
            image: "menuText",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(-.2 + b)
        }), this.buyPopup.addChild(this["menu" + d]), b += .12, this["menu" + d].addChild((new TGE.Text).setup({
            text: "" + TGS.Microtransactions.PriceAsFormattedString(TGE.Game._sInstance.data[d].price),
            font: "25px Market Deco",
            color: "#ffbe00",
            x: this.percentageOfWidth(.1),
            y: this.percentageOfHeight(0)
        })), this["menu" + d].addChild((new TGE.Text).setup({
            text: TGE.Game._sInstance.data[d].title + " : ",
            font: "25px Market Deco",
            color: "#ffbe00",
            x: this.percentageOfWidth(-.17),
            y: this.percentageOfHeight(.002)
        })), this["buyBtn" + d] = (new TGE.Button).setup({
            image: "buyWithGlow",
            x: this.percentageOfWidth(.34),
            y: -165 + c,
            numStates: 1,
            pressFunction: this.buyClicked.bind(this, TGE.Game._sInstance.data[d].id, a[d])
        }), this.buyPopup.addChild(this["buyBtn" + d]), c += 100;
        TGE.AssetManager.Exists("tgs_currency_icon") && (this.currencyIcon1 = (new TGE.Sprite).setup({
            image: "tgs_currency_icon",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(0),
            scale: .5
        }), this.menu0.addChild(this.currencyIcon1), this.currencyIcon2 = (new TGE.Sprite).setup({
            image: "tgs_currency_icon",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(0),
            scale: .5
        }), this.menu1.addChild(this.currencyIcon2), this.currencyIcon3 = (new TGE.Sprite).setup({
            image: "tgs_currency_icon",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(0),
            scale: .5
        }), this.menu2.addChild(this.currencyIcon3), this.currencyIcon4 = (new TGE.Sprite).setup({
            image: "tgs_currency_icon",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(0),
            scale: .5
        }), this.menu3.addChild(this.currencyIcon4));
        for (var e = 1, d = 0; d < TGE.Game._sInstance.gameData.inGameData.buyMoreChips.noOfMenu - 1; d++) CWTween.from(this["menu" + d], .3, {
            y: this.percentageOfHeight(-.7)
        }, {
            delay: .1 + e,
            timeline: !0,
            ease: {
                name: "Bounce",
                type: "Out"
            }
        }), CWTween.from(this["buyBtn" + d], .3, {
            y: -500
        }, {
            delay: .1 + e,
            timeline: !0,
            ease: {
                name: "Bounce",
                type: "Out"
            }
        }), e -= .1
    },
    createSorryMessage: function() {
        var a = this.addChild((new TGE.DisplayObjectContainer).setup({
            backgroundColor: "black",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        }));
        a.width = this.width, a.height = this.height, a.alpha = .4, this.buyPopup = (new TGE.DisplayObjectContainer).setup({
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.5)
        });
        var b = (new TGE.Sprite).setup({
            image: "menuAndInstructions",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(0)
        });
        b.scaleY = .5, this.buyPopup.addChild(b), this.addChild(this.buyPopup), this.close_btn = (new TGE.Button).setup({
            image: "close",
            x: this.percentageOfWidth(.4),
            y: this.percentageOfHeight(-.175),
            numStates: 1,
            pressFunction: this.closeButton.bind(this)
        }), this.buyPopup.addChild(this.close_btn), CWTween.from(this.buyPopup, .2, {
            scaleX: .6,
            scaleY: .6
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        }), this.buyPopup.addChild((new TGE.Text).setup({
            text: "即将开放",
            font: "36px Market Deco",
            wrapWidth: 490,
            color: "#ffbe00",
            x: this.percentageOfWidth(-.02),
            y: this.percentageOfHeight(-.098)
        })), this.buyPopup.addChild((new TGE.Text).setup({
            text: "每日登陆会获得免费筹码。",
            font: "36px Market Deco",
            wrapWidth: 490,
            color: "#ffbe00",
            x: this.percentageOfWidth(-.02),
            y: this.percentageOfHeight(.07)
        }))
    },
    closeButton: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.close_btn.mouseEnabled = !1, CWTween.to(this.buyPopup, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Sine",
                type: "In"
            },
            onComplete: this.animationComplete.bind(this)
        }), null != this.eventID && "undefined" != typeof this.eventID && this.removeEventListener("tgs_login_changed", this.eventID)
    },
    animationComplete: function() {
        this.close()
    },
    addLoggedInListener: function() {
        this.eventID = this.addEventListener("tgs_login_changed", this.refreshParent.bind(this))
    },
    refreshParent: function() {
        this.parent.init(!1), this.removeEventListener("tgs_login_changed", this.eventID)
    },
    buyClicked: function(a, b) {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1);
        var c = TGE.Game.GetInstance().mCreditAmt + b;
        TGS.LoggedIn() || this.addLoggedInListener(), TGS.Microtransactions.PurchaseProduct({
            productID: a,
            gameDataUpdates: {
                credits: c
            },
            onSuccess: this.madePurchase.bind(this),
            onFailure: this.purchaseFailed.bind(this)
        })
    },
    purchaseNextLevel: function(a) {
        if (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), TGE.Game.GetInstance().currentLevelNo < 3) {
            var b = TGE.Game.GetInstance().currentLevelNo + 1;
            TGS.Microtransactions.PurchaseProduct({
                productID: a,
                gameDataUpdates: {
                    highest: b
                },
                onSuccess: this.madePurchase1.bind(this),
                onFailure: this.purchaseFailed.bind(this)
            })
        } else this.addChild(new InGamePopup(this.width / 2, this.height / 2, "purchaseLevel4"))
    },
    purchaseFailed: function() {},
    madePurchase: function() {
        this.close(), this.updateCredits(), "mainGame" == this.screenRef && this.parent.markForRemoval()
    },
    madePurchase1: function() {
        this.close(), TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game.GetInstance().currentLevelNo].removeChildren(), TGE.Game._sInstance.levelSelectionScreen["level" + TGE.Game.GetInstance().currentLevelNo + "text"] = (new TGE.Text).setup({
            text: "等级" + TGE.Game.GetInstance().currentLevelNo,
            font: "25px Market Deco",
            color: "gold",
            x: this.percentageOfWidth(-.08),
            y: this.percentageOfHeight(-.002)
        }), TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game.GetInstance().currentLevelNo].addChild(TGE.Game._sInstance.levelSelectionScreen["level" + TGE.Game.GetInstance().currentLevelNo + "text"]), TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game.GetInstance().currentLevelNo].addChild((new TGE.Button).setup({
            image: "playWithGlow",
            x: this["menu" + TGE.Game.GetInstance().currentLevelNo].percentageOfWidth(.39),
            y: 2,
            numStates: 1,
            pressFunction: TGE.Game._sInstance.levelSelectionScreen.validateLevelSelection.bind(TGE.Game._sInstance.levelSelectionScreen, TGE.Game.GetInstance().currentLevelNo)
        })), TGE.Game.GetInstance().currentLevelNo + 1 != 4 && (TGE.Game._sInstance.levelSelectionScreen["buyBtn" + (TGE.Game.GetInstance().currentLevelNo + 1)].mouseEnabled = !0, TGE.Game._sInstance.levelSelectionScreen["buyBtn" + (TGE.Game.GetInstance().currentLevelNo + 1)].alpha = 1, TGE.Game._sInstance.levelSelectionScreen["level" + (TGE.Game.GetInstance().currentLevelNo + 1) + "text"].alpha = 1), TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game.GetInstance().currentLevelNo].levelUnlocked = (new TGE.Sprite).setup({
            image: "unlockLevel",
            x: 0,
            y: 0
        }), TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game.GetInstance().currentLevelNo].addChild(TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game.GetInstance().currentLevelNo].levelUnlocked), TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game.GetInstance().currentLevelNo].levelUnlocked.alpha = 0, TGE.Game._sInstance.levelSelectionScreen["menu" + (TGE.Game.GetInstance().currentLevelNo - 1)].levelUnlocked.markForRemoval(), CWTween.to(TGE.Game._sInstance.levelSelectionScreen["menu" + TGE.Game._sInstance.currentLevelNo].levelUnlocked, .5, {
            alpha: 1
        }, {
            reverse: !0
        }), TGE.Game._sInstance.mainGame.updateLevelBadgeData(), TGE.Game._sInstance.stage.addChild(new LevelBadgePopup(this.width, this.height))
    },
    updateCredits: function() {
        TGE.Game._sInstance.levelSelectionScreen.creditText.text = TGE.Game.GetInstance().mCreditAmt, "mainGame" == this.screenRef && (TGE.Game._sInstance.mainGame.mCreditText.text = TGE.Game.GetInstance().mCreditAmt);
        var a = TGE.Game._sInstance.mainGame.updateChipsBadgeData();
        1 == a && TGE.Game._sInstance.stage.addChild(new ChipsBadgePopup(this.width, this.height))
    }
}, extend(BuyMoreChipsPopUp, TGE.Window), NoChipsPopup = function(a, b, c) {
    NoChipsPopup.superclass.constructor.apply(this, arguments), this.mouseEnabled = !0, this.ref = c, this.registrationX = this.registrationY = 0, this.setup({
        x: 0,
        y: 0,
        image: "bg_transperent"
    }), this.morecoinpopup = (new TGE.Sprite).setup({
        image: "morecoinpopup",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    }), this.addChild(this.morecoinpopup), this.morecoinpopup.addChild((new TGE.Button).setup({
        image: "buyWithGlow",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(.25),
        numStates: 1,
        pressFunction: NoChipsPopup.prototype.buyMoreChipsBtnClicked.bind(this)
    })), this.morecoinpopup.addChild((new TGE.Text).setup({
        text: "你没有足够的筹码下注",
        font: "26px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(0)
    })), this.morecoinpopup.addChild((new TGE.Text).setup({
        text: "请购买更多的筹码",
        font: "26px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(.07)
    })), this.morecoinpopup.addChild((new TGE.Button).setup({
        image: "close",
        x: this.percentageOfWidth(.4),
        y: this.percentageOfHeight(-.26),
        numStates: 1,
        pressFunction: NoChipsPopup.prototype.closeBtnFunction.bind(this)
    })), CWTween.from(this.morecoinpopup, .8, {
        y: this.percentageOfHeight(-.5)
    }, {
        ease: {
            name: "Elastic",
            type: "InOut"
        }
    })
}, NoChipsPopup.prototype = {
    closeBtnFunction: function() {
        CWTween.to(this.morecoinpopup, .8, {
            y: this.percentageOfHeight(-.5)
        }, {
            ease: {
                name: "Elastic",
                type: "InOut"
            },
            onComplete: this.closePopup.bind(this)
        }), TGE.Game._sInstance.audioPlayer.playAudio("button", !1)
    },
    closePopup: function() {
        this.markForRemoval()
    },
    buyMoreChipsBtnClicked: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.addChild(new BuyMoreChipsPopUp(this.width, this.height, this.ref))
    }
}, extend(NoChipsPopup, TGE.Sprite), BadgesPopUp = function() {
    BadgesPopUp.superclass.constructor.apply(this, arguments), this.addChild((new TGE.Sprite).setup({
        image: "gameScreenBg",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    })), this.background = (new TGE.Sprite).setup({
        image: "level_unlock",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    }), this.addChild(this.background), CWTween.from(this.background, .2, {
        scaleX: .6,
        scaleY: .6
    }, {
        ease: {
            name: "Back",
            type: "Out"
        }
    });
    for (var a = 0, b = 1; b <= TGE.Game._sInstance.gameData.inGameData.badgesPopup.noOfMenu; b++) this["menu" + b] = (new TGE.Sprite).setup({
        image: "menuText",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-.27 + a)
    }), this.background.addChild(this["menu" + b]), a += .134, this.glow1 = (new TGE.Sprite).setup({
        image: "Outerglow",
        x: this.percentageOfWidth(-.27),
        y: this.percentageOfHeight(0)
    }), this["menu" + b].addChild(this.glow1), this.glow1.scaleX = this.glow1.scaleY = .47;
    for (var b = 1; 3 >= b; b++) this["levelBadge" + b] = (new TGE.Sprite).setup({
        image: "BadgeLevel" + b,
        x: this.percentageOfWidth(-.27),
        y: this.percentageOfHeight(0)
    }), this["menu" + b].addChild(this["levelBadge" + b]), this["levelBadge" + b].scaleX = this["levelBadge" + b].scaleY = .47, this["chipsBadge" + b] = (new TGE.Sprite).setup({
        image: "BadgeChips" + b,
        x: this.percentageOfWidth(-.27),
        y: this.percentageOfHeight(0)
    }), this["menu" + (b + 3)].addChild(this["chipsBadge" + b]), this["chipsBadge" + b].scaleX = this["chipsBadge" + b].scaleY = .47;
    this.levelBadgeText1 = (new TGE.Text).setup({
        text: "开启等级2成就",
        font: "25px Market Deco",
        color: "#ffbe00",
        x: this.percentageOfWidth(.16),
        y: this.percentageOfHeight(0)
    }), this.menu1.addChild(this.levelBadgeText1), this.levelBadgeText2 = (new TGE.Text).setup({
        text: "开启等级3成就",
        font: "25px Market Deco",
        color: "#ffbe00",
        x: this.percentageOfWidth(.16),
        y: this.percentageOfHeight(0)
    }), this.menu2.addChild(this.levelBadgeText2), this.levelBadgeText3 = (new TGE.Text).setup({
        text: "锦标赛成就",
        font: "25px Market Deco",
        color: "#ffbe00",
        x: this.percentageOfWidth(.16),
        y: this.percentageOfHeight(0)
    }), this.menu3.addChild(this.levelBadgeText3), this.chipsBadgeText1 = (new TGE.Text).setup({
        text: "达到1000筹码成就",
        font: "25px Market Deco",
        color: "#ffbe00",
        x: this.percentageOfWidth(.16),
        y: this.percentageOfHeight(0)
    }), this.menu4.addChild(this.chipsBadgeText1), this.chipsBadgeText2 = (new TGE.Text).setup({
        text: "达到5000筹码成就",
        font: "25px Market Deco",
        color: "#ffbe00",
        x: this.percentageOfWidth(.16),
        y: this.percentageOfHeight(0)
    }), this.menu5.addChild(this.chipsBadgeText2), this.chipsBadgeText3 = (new TGE.Text).setup({
        text: "达到10000筹码成就",
        font: "25px Market Deco",
        color: "#ffbe00",
        x: this.percentageOfWidth(.16),
        y: this.percentageOfHeight(0)
    }), this.menu6.addChild(this.chipsBadgeText3), this.cancelBtn = (new TGE.Button).setup({
        image: "close",
        x: this.percentageOfWidth(.4),
        y: this.percentageOfHeight(-.4),
        numStates: 1,
        pressFunction: this.closeAnimation.bind(this)
    }), this.background.addChild(this.cancelBtn), this.showAnimationComplete();
    for (var c = 1, b = 1; b <= TGE.Game._sInstance.gameData.inGameData.badgesPopup.noOfMenu; b++) CWTween.from(this["menu" + b], .3, {
        y: this.percentageOfHeight(-.7)
    }, {
        delay: .1 + c,
        timeline: !0,
        ease: {
            name: "Bounce",
            type: "Out"
        }
    }), c -= .1
}, BadgesPopUp.prototype = {
    closeAnimation: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Sine",
                type: "In"
            },
            onComplete: this.closeWindow.bind(this)
        })
    },
    closeWindow: function() {
        this.close()
    },
    showAnimationComplete: function() {
        for (var a = 1; a <= TGE.Game._sInstance.levelBadgeCounter; a++) this["levelBadge" + a].setImage("levelBadge" + a), this["levelBadgeText" + a].alpha = 1;
        for (var a = 1; a <= TGE.Game._sInstance.chipsBadgeCounter; a++) this["chipsBadge" + a].setImage("chipsBadge" + a), this["chipsBadgeText" + a].alpha = 1
    }
}, extend(BadgesPopUp, TGE.Window), winningHandPopup = function(a, b) {
    winningHandPopup.superclass.constructor.apply(this), this.mouseEnabled = !0, this.width = a, this.height = b, this.rules = [], this.rules2 = [], this.rulesX = .35 * this.width, this.setup({
        x: .5 * a,
        y: .41 * b,
        image: TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].winningHandImages
    })
}, winningHandPopup.prototype = {
    setUp: function(a) {
        var b = 4 != this.parent.adCount ? .35 : -.05;
        if (this.rulesX = this.width * b, this.betCount = a, 1 == TGE.Game._sInstance.selectedLevel || 2 == TGE.Game._sInstance.selectedLevel) {
            for (var c = .02, d = 0; 9 > d; d++) {
                var e = this.addChild((new TGE.Text).setup({
                    text: "",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.rulesX,
                    y: this.height * -.3 + c
                }));
                this.rules.push(e), e.myY = this.rules[d].y, c += 30
            }
            this.initialLevelsAmount()
        } else if (3 == TGE.Game._sInstance.selectedLevel) {
            for (var c = .2, d = 0; 11 > d; d++) {
                var f = this.addChild((new TGE.Text).setup({
                    text: "",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.rulesX,
                    y: this.height * -.38 + c
                }));
                this.rules2.push(f), f.myY = this.rules2[d].y, c += 30
            }
            this.thirdLevelAmount()
        }
    },
    initialLevelsAmount: function() {
        for (var a = 0; 9 > a; a++) this.rules[a].text = TGE.Game._sInstance.gameData.inGameData.rules["rules" + a] * this.betCount, this.rules[a].x = this.rulesX, 4 == this.parent.adCount && (this.rules[a].y = this.rules[a].myY + 15)
    },
    thirdLevelAmount: function() {
        for (var a = 0; 11 > a; a++) this.rules2[a].text = TGE.Game._sInstance.gameData.inGameData.thirdLevelRules["rules2" + a] * this.betCount, this.rules2[a].x = this.rulesX, 4 == this.parent.adCount && (this.rules2[a].y = this.rules2[a].myY + 15)
    }
}, extend(winningHandPopup, TGE.Sprite);
var AudioPlayer = function(a) {
    this.reference = a
};
AudioPlayer.prototype = {
    playAudio: function(a, b) {
        this.reference.oniOS() && "bg" != a || (b = void 0 == b || 0 == b ? 0 : 1, this.reference.audioManager.Play({
            id: "" + a,
            loop: "" + b
        }))
    }
}, InGamePopup = function(a, b, c) {
    InGamePopup.superclass.constructor.apply(this, arguments), this.mouseEnabled = !0, this.xVal = a, this.yVal = b, this.setUp(c)
}, InGamePopup.prototype = {
    setUp: function(a) {
        switch (this.smallPopup = this.setup({
            x: 1,
            y: this.yVal,
            image: "bg_transperent"
        }), this.bg = (new TGE.Sprite).setup({
            image: "smallPopup",
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(0)
        }), this.addChild(this.bg), this.calledFor = a, this.calledFor) {
            case "miniGame":
                var b = (new TGE.Text).setup({
                    text: "你需要让你的奖金额翻倍?",
                    font: "22px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(-.04)
                });
                this.bg.addChild(b);
                var c = (new TGE.Button).setup({
                    image: "yesbtn",
                    x: this.percentageOfWidth(-.15),
                    y: this.percentageOfHeight(.04),
                    numStates: 1,
                    pressFunction: this.miniGameYesBtn.bind(this)
                });
                this.bg.addChild(c);
                var d = (new TGE.Button).setup({
                    image: "nobtn",
                    x: this.percentageOfWidth(.15),
                    y: this.percentageOfHeight(.04),
                    numStates: 1,
                    pressFunction: this.miniGameNoBtn.bind(this)
                });
                this.bg.addChild(d), CWTween.from(this.bg, .5, {
                    x: this.xVal,
                    y: this.yVal
                }, {
                    ease: {
                        name: "Back",
                        type: "Out"
                    }
                });
                break;
            case "betpopup":
                this.infoMessage = (new TGE.Text).setup({
                    text: "请下注",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(0)
                }), this.bg.addChild(this.infoMessage), CWTween.from(this.bg, .5, {
                    x: this.xVal,
                    y: this.yVal
                }, {
                    ease: {
                        name: "Back",
                        type: "Out"
                    }
                }), CWTween.from(this.bg, .1, {}, {
                    timeline: !0,
                    delay: 5,
                    onComplete: this.onMsgDisplayed.bind(this)
                }), this.addEventListener("mousedown", this.onMsgDisplayed.bind(this));
                break;
            case "dailyBonus":
                this.bg.addChild((new TGE.Text).setup({
                    text: "你得到了100个筹码！！！",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(0)
                })), CWTween.from(this.bg, .5, {
                    x: this.xVal,
                    y: this.yVal
                }, {
                    ease: {
                        name: "Back",
                        type: "Out"
                    }
                }), CWTween.from(this.bg, .1, {}, {
                    timeline: !0,
                    delay: 5,
                    onComplete: this.onMsgDisplayed.bind(this)
                }), this.addEventListener("mousedown", this.onMsgDisplayed.bind(this));
                break;
            case "purchaseLevel4":
                this.bg.addChild((new TGE.Text).setup({
                    text: "第四级即将到来！",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(0)
                })), CWTween.from(this.bg, .5, {
                    x: this.xVal,
                    y: this.yVal
                }, {
                    ease: {
                        name: "Back",
                        type: "Out"
                    }
                }), CWTween.from(this.bg, .1, {}, {
                    timeline: !0,
                    delay: 5,
                    onComplete: this.onMsgDisplayed.bind(this)
                }), this.addEventListener("mousedown", this.onMsgDisplayed.bind(this));
                break;
            case "betInfo1":
                this.bg.addChild((new TGE.Text).setup({
                    text: "投注范围: " + TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount + " - " + TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount,
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(-.02)
                })), this.bg.addChild((new TGE.Text).setup({
                    text: "注意提示箭头！",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(.02)
                })), CWTween.from(this.bg, .5, {
                    x: this.xVal,
                    y: this.yVal
                }, {
                    ease: {
                        name: "Back",
                        type: "Out"
                    }
                }), CWTween.from(this.bg, .1, {}, {
                    timeline: !0,
                    delay: 5,
                    onComplete: this.onMsgDisplayed.bind(this)
                }), this.addEventListener("mousedown", this.onMsgDisplayed.bind(this));
                break;
            case "betInfo2":
                this.bg.addChild((new TGE.Text).setup({
                    text: "投注范围: " + TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount + " - " + TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount,
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(-.02)
                })), this.bg.addChild((new TGE.MultilineText).setup({
                    text: "玩一个小游戏来增加你的奖金的。或者失去一切.",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(.02)
                })), CWTween.from(this.bg, .5, {
                    x: this.xVal,
                    y: this.yVal
                }, {
                    ease: {
                        name: "Back",
                        type: "Out"
                    }
                }), CWTween.from(this.bg, .1, {}, {
                    timeline: !0,
                    delay: 5,
                    onComplete: this.onMsgDisplayed.bind(this)
                }), this.addEventListener("mousedown", this.onMsgDisplayed.bind(this));
                break;
            case "betInfo3":
                this.bg.addChild((new TGE.Text).setup({
                    text: "投注范围: " + TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].minBetAmount + " - " + TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].maxBetAmount,
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(-.02)
                })), this.bg.addChild((new TGE.Text).setup({
                    text: "你有一个小王！明智地使用它。",
                    font: "25px Market Deco",
                    color: "#f9db15",
                    x: this.percentageOfWidth(0),
                    y: this.percentageOfHeight(.02)
                })), CWTween.from(this.bg, .5, {
                    x: this.xVal,
                    y: this.yVal
                }, {
                    ease: {
                        name: "Back",
                        type: "Out"
                    }
                }), CWTween.from(this.bg, .1, {}, {
                    timeline: !0,
                    delay: 5,
                    onComplete: this.onMsgDisplayed.bind(this)
                }), this.addEventListener("mousedown", this.onMsgDisplayed.bind(this))
        }
    },
    miniGameYesBtn: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.bg, .8, {
            y: this.percentageOfWidth(1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.startMiniGame.bind(this)
        })
    },
    startMiniGame: function() {
        TGE.Game._sInstance.mainGame.mainGameScreenObjectsRemove(), this.bg.markForRemoval(), this.markForRemoval()
    },
    miniGameNoBtn: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.bg, .8, {
            y: this.percentageOfWidth(1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.closePopup.bind(this)
        })
    },
    closePopup: function() {
        this.smallPopup.markForRemoval(), this.parent.checkForLevelUp()
    },
    onMsgDisplayed: function() {
        this.isRemoved || (this.isRemoved = !0, CWTween.to(this, .5, {
            y: this.percentageOfWidth(2)
        }, {
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.closeBetPopup.bind(this)
        }))
    },
    closeBetPopup: function() {
        this.smallPopup.markForRemoval(), this.markForRemoval()
    }
}, extend(InGamePopup, TGE.Sprite), Instruction = function(a, b) {
    Instruction.superclass.constructor.apply(this), this.setUp(), this.instruction = this.setup({
        x: a / 2,
        y: b / 2,
        image: "gameScreenBg"
    }), this.mouseEnabled = !0
}, Instruction.prototype = {
    setUp: function() {
        this.background = (new TGE.Sprite).setup({
            image: "menuAndInstructions",
            x: 0,
            y: 0
        }), this.addChild(this.background), this.instructionText = (new TGE.Sprite).setup({
            image: "instructions",
            x: this.background.percentageOfWidth(0),
            y: this.background.percentageOfHeight(-.38)
        }), this.background.addChild(this.instructionText), this.instructionImage1 = (new TGE.Sprite).setup({
            image: "instructions1",
            x: this.background.percentageOfWidth(0),
            y: this.background.percentageOfHeight(0)
        }), this.background.addChild(this.instructionImage1), this.cancelBtn1 = (new TGE.Button).setup({
            image: "close",
            x: this.background.percentageOfWidth(.4),
            y: this.background.percentageOfHeight(-.41),
            numStates: 1,
            pressFunction: this.closeWindow1.bind(this)
        }), this.background.addChild(this.cancelBtn1), this.nextBtn1 = (new TGE.Button).setup({
            image: "Next_BTN",
            x: this.background.percentageOfWidth(0),
            y: this.background.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.nextBtnFunction1.bind(this)
        }), this.background.addChild(this.nextBtn1), CWTween.from(this.background, .2, {
            scaleX: .6,
            scaleY: .6
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        })
    },
    nextBtnFunction1: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background, .5, {
            x: this.percentageOfWidth(-1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.instruction2.bind(this)
        })
    },
    instruction2: function() {
        this.background.markForRemoval(), this.background2 = (new TGE.Sprite).setup({
            image: "menuAndInstructions",
            x: 0,
            y: 0
        }), this.addChild(this.background2), this.instructionText1 = (new TGE.Sprite).setup({
            image: "instructions",
            x: this.background2.percentageOfWidth(0),
            y: this.background2.percentageOfHeight(-.38)
        }), this.background2.addChild(this.instructionText1), this.instructionImage2 = (new TGE.Sprite).setup({
            image: "instructions2",
            x: this.background2.percentageOfHeight(0),
            y: this.background2.percentageOfHeight(.02)
        }), this.background2.addChild(this.instructionImage2), this.cancelBtn2 = (new TGE.Button).setup({
            image: "close",
            x: this.background2.percentageOfWidth(.4),
            y: this.background2.percentageOfHeight(-.41),
            numStates: 1,
            pressFunction: this.closeWindow2.bind(this)
        }), this.background2.addChild(this.cancelBtn2), this.nextBtn2 = (new TGE.Button).setup({
            image: "Next_BTN",
            x: this.background2.percentageOfWidth(.15),
            y: this.background2.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.nextBtnFunction2.bind(this)
        }), this.background2.addChild(this.nextBtn2), this.backBtn2 = (new TGE.Button).setup({
            image: "back",
            x: this.background2.percentageOfWidth(-.15),
            y: this.background2.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.backBtnFunction2.bind(this)
        }), this.background2.addChild(this.backBtn2), CWTween.from(this.background2, .2, {
            scaleX: .6,
            scaleY: .6
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        })
    },
    nextBtnFunction2: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background2, .5, {
            x: this.percentageOfWidth(-1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.instruction3.bind(this)
        })
    },
    backBtnFunction2: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background2, .5, {
            x: this.percentageOfWidth(1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.setUp.bind(this)
        })
    },
    instruction3: function() {
        this.background2.markForRemoval(), this.background3 = (new TGE.Sprite).setup({
            image: "menuAndInstructions",
            x: 0,
            y: 0
        }), this.addChild(this.background3), this.instructionText3 = (new TGE.Sprite).setup({
            image: "instructions",
            x: this.background3.percentageOfWidth(0),
            y: this.background3.percentageOfHeight(-.38)
        }), this.background3.addChild(this.instructionText3), this.instructionImage3 = (new TGE.Sprite).setup({
            image: "instructions3",
            x: this.background3.percentageOfWidth(0),
            y: this.background3.percentageOfHeight(0)
        }), this.background3.addChild(this.instructionImage3), this.cancelBtn3 = (new TGE.Button).setup({
            image: "close",
            x: this.background3.percentageOfWidth(.4),
            y: this.background3.percentageOfHeight(-.41),
            numStates: 1,
            pressFunction: this.closeWindow3.bind(this)
        }), this.background3.addChild(this.cancelBtn3), this.nextBtn3 = (new TGE.Button).setup({
            image: "Next_BTN",
            x: this.background3.percentageOfWidth(.15),
            y: this.background3.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.nextBtnFunction3.bind(this)
        }), this.background3.addChild(this.nextBtn3), this.backBtn3 = (new TGE.Button).setup({
            image: "back",
            x: this.background3.percentageOfWidth(-.15),
            y: this.background3.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.backBtnFunction3.bind(this)
        }), this.background3.addChild(this.backBtn3), CWTween.from(this.background3, .2, {
            scaleX: .6,
            scaleY: .6
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        })
    },
    nextBtnFunction3: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background3, .5, {
            x: this.percentageOfWidth(-1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.instruction4.bind(this)
        })
    },
    backBtnFunction3: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background3, .5, {
            x: this.percentageOfWidth(1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.instruction2.bind(this)
        })
    },
    instruction4: function() {
        this.background3.markForRemoval(), this.background4 = (new TGE.Sprite).setup({
            image: "menuAndInstructions",
            x: 0,
            y: 0
        }), this.addChild(this.background4), this.instructionText4 = (new TGE.Sprite).setup({
            image: "instructions",
            x: this.background4.percentageOfWidth(0),
            y: this.background4.percentageOfHeight(-.38)
        }), this.background4.addChild(this.instructionText4), this.instructionImage4 = (new TGE.Sprite).setup({
            image: "instructions4",
            x: this.background4.percentageOfWidth(0),
            y: this.background4.percentageOfHeight(0)
        }), this.background4.addChild(this.instructionImage4), this.cancelBtn4 = (new TGE.Button).setup({
            image: "close",
            x: this.background4.percentageOfWidth(.4),
            y: this.background4.percentageOfHeight(-.41),
            numStates: 1,
            pressFunction: this.closeWindow4.bind(this)
        }), this.background4.addChild(this.cancelBtn4), this.nextBtn4 = (new TGE.Button).setup({
            image: "Next_BTN",
            x: this.background4.percentageOfWidth(.15),
            y: this.background4.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.nextBtnFunction4.bind(this)
        }), this.background4.addChild(this.nextBtn4), this.backBtn4 = (new TGE.Button).setup({
            image: "back",
            x: this.background4.percentageOfWidth(-.15),
            y: this.background4.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.backBtnFunction4.bind(this)
        }), this.background4.addChild(this.backBtn4), CWTween.from(this.background4, .2, {
            scaleX: .6,
            scaleY: .6
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        })
    },
    nextBtnFunction4: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background4, .5, {
            x: this.percentageOfWidth(-1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.instruction5.bind(this)
        })
    },
    backBtnFunction4: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background4, .5, {
            x: this.percentageOfWidth(1)
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.instruction3.bind(this)
        })
    },
    instruction5: function() {
        this.background4.markForRemoval(), this.background5 = (new TGE.Sprite).setup({
            image: "menuAndInstructions",
            x: 0,
            y: 0
        }), this.addChild(this.background5), this.instructionText5 = (new TGE.Sprite).setup({
            image: "instructions",
            x: this.background5.percentageOfWidth(0),
            y: this.background5.percentageOfHeight(-.38)
        }), this.background5.addChild(this.instructionText5), this.instructionImage5 = (new TGE.Sprite).setup({
            image: "instructions5",
            x: this.background5.percentageOfWidth(0),
            y: this.background5.percentageOfHeight(.06)
        }), this.background5.addChild(this.instructionImage5), this.cancelBtn5 = (new TGE.Button).setup({
            image: "close",
            x: this.background5.percentageOfWidth(.4),
            y: this.background5.percentageOfHeight(-.41),
            numStates: 1,
            pressFunction: this.closeWindow5.bind(this)
        }), this.background5.addChild(this.cancelBtn5), this.backBtn5 = (new TGE.Button).setup({
            image: "back",
            x: this.background5.percentageOfWidth(.3),
            y: this.background5.percentageOfHeight(.43),
            numStates: 1,
            pressFunction: this.backBtnFunction5.bind(this)
        }), this.background5.addChild(this.backBtn5), CWTween.from(this.background5, .2, {
            scaleX: .6,
            scaleY: .6
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        })
    },
    backBtnFunction5: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background5, .5, {
            x: this.percentageOfWidth(1)
        }, {
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.instruction4.bind(this)
        })
    },
    closeWindow1: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Sine",
                type: "In"
            },
            onComplete: this.closeWindowAfterDone.bind(this)
        })
    },
    closeWindow2: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background2, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Sine",
                type: "In"
            },
            onComplete: this.closeWindowAfterDone.bind(this)
        })
    },
    closeWindow3: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background3, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Sine",
                type: "In"
            },
            onComplete: this.closeWindowAfterDone.bind(this)
        })
    },
    closeWindow4: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background4, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Sine",
                type: "In"
            },
            onComplete: this.closeWindowAfterDone.bind(this)
        })
    },
    closeWindow5: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background5, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Sine",
                type: "In"
            },
            onComplete: this.closeWindowAfterDone.bind(this)
        })
    },
    closeWindowAfterDone: function() {
        this.markForRemoval()
    }
}, extend(Instruction, TGE.Sprite), InGameTutorial = function(a, b) {
    InGameTutorial.superclass.constructor.apply(this, arguments), this.CardArray = [], this.betCount = 0, this.hint = [], this.mouseEnabled = !0, this.clickedCardCounter = 0, this.gameBackground = this.addChild((new TGE.Sprite).setup({
        image: "gameScreenBg",
        x: 0,
        y: 0
    })), this.gameBackground.registrationX = this.gameBackground.registrationY = 0, this.blankpopup = (new TGE.Sprite).setup({
        image: "blankpopup",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.41)
    }), this.addChild(this.blankpopup), this.coinBtn = (new TGE.Button).setup({
        image: TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].coinImage,
        x: this.percentageOfWidth(.15),
        y: this.percentageOfHeight(.93),
        numStates: 1,
        pressFunction: this.betPlusFunction.bind(this)
    }), this.addChild(this.coinBtn), this.coinGlow = (new TGE.Sprite).setup({
        image: "coinGlow",
        x: this.percentageOfWidth(.15),
        y: this.percentageOfHeight(.93)
    }), this.addChild(this.coinGlow), this.betMinBtn = (new TGE.Button).setup({
        image: "betMinBtn",
        x: this.percentageOfWidth(.4),
        y: this.percentageOfHeight(.93),
        numStates: 1,
        pressFunction: this.betMinFunction.bind(this)
    }), this.addChild(this.betMinBtn), this.betMaxBtn = (new TGE.Button).setup({
        image: "betMaxBtn",
        x: this.percentageOfWidth(.64),
        y: this.percentageOfHeight(.93),
        numStates: 1,
        pressFunction: this.betMaxFunction.bind(this)
    }), this.addChild(this.betMaxBtn), this.dealBtn = (new TGE.Button).setup({
        image: "dealBtn",
        x: this.percentageOfWidth(.88),
        y: this.percentageOfHeight(.93),
        numStates: 1,
        pressFunction: this.dealBtnFunction.bind(this)
    }), this.addChild(this.dealBtn), this.button_draw = (new TGE.Button).setup({
        image: "button_draw",
        x: this.percentageOfWidth(.88),
        y: this.percentageOfHeight(.93),
        numStates: 1,
        pressFunction: this.drawFunction.bind(this)
    }), this.addChild(this.button_draw), this.button_draw.visible = !1, this.button_draw.mouseEnabled = !1, this.cardBG = (new TGE.Sprite).setup({
        image: "cardBG",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.737)
    }), this.addChild(this.cardBG), this.creditBg = (new TGE.Sprite).setup({
        image: "creditBg",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.145)
    }), this.addChild(this.creditBg), this.mBet = (new TGE.Text).setup({
        text: "0",
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.creditBg.percentageOfWidth(-.1),
        y: this.creditBg.percentageOfHeight(.1)
    }), this.creditBg.addChild(this.mBet), this.mCreditText = (new TGE.Text).setup({
        text: "20",
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.creditBg.percentageOfWidth(.33),
        y: this.creditBg.percentageOfHeight(.1)
    }), this.creditBg.addChild(this.mCreditText), this.xpText = (new TGE.Text).setup({
        text: "" + TGE.Game._sInstance.xp,
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.creditBg.percentageOfWidth(-.34),
        y: this.creditBg.percentageOfHeight(.1)
    }), this.creditBg.addChild(this.xpText), this.mWinText = (new TGE.Text).setup({
        text: "0",
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.creditBg.percentageOfWidth(.1),
        y: this.creditBg.percentageOfHeight(.1)
    }), this.creditBg.addChild(this.mWinText), this.closeMenuBg = (new TGE.Sprite).setup({
        image: "closeMenuBg",
        x: this.percentageOfWidth(1.1),
        y: this.percentageOfHeight(.02)
    }), this.addChild(this.closeMenuBg), this.homebtn = (new TGE.Button).setup({
        image: "homebtn",
        x: this.closeMenuBg.percentageOfWidth(-.43),
        y: this.closeMenuBg.percentageOfHeight(.2),
        numStates: 1
    }), this.closeMenuBg.addChild(this.homebtn), this.soundBtn = (new TGE.Button).setup({
        image: "unMute",
        x: this.closeMenuBg.percentageOfWidth(-.305),
        y: this.closeMenuBg.percentageOfHeight(.2),
        numStates: 1
    }), this.closeMenuBg.addChild(this.soundBtn), this.helpBtn = (new TGE.Button).setup({
        image: "help",
        x: this.closeMenuBg.percentageOfWidth(-.18),
        y: this.closeMenuBg.percentageOfHeight(.2),
        numStates: 1
    }), this.closeMenuBg.addChild(this.helpBtn), this.betMaxBtn.mouseEnabled = !1, this.betMinBtn.mouseEnabled = !1, this.coinBtn.mouseEnabled = !1, this.xIncrement = 0;
    for (var c = 0; c < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; c++) this.CardArray[c] = (new TGE.Sprite).setup({
        image: "cardBackground",
        x: this.percentageOfWidth(.125) + this.xIncrement,
        y: this.percentageOfHeight(.737)
    }), this.addChild(this.CardArray[c]), this.xIncrement += TGE.Game._sInstance.gameData.inGameData.cardsInformation.differenceBtnTwoCards;
    this.cardDeckObj = new CardDeck(TGE.Game._sInstance.levelConfig.levelData["level_" + TGE.Game._sInstance.selectedLevel].numberOfCards), this.tint = this.addChild((new TGE.Sprite).setup({
        image: "bg_tint",
        x: .5 * a,
        y: .5 * b
    })), this.tint.alpha = .7, this.topbg = this.addChild((new TGE.Sprite).setup({})), this.message = (new TGE.MultilineText).setup({
        text: "点击筹码币\n或最大下注或最小下注按钮",
        font: "28px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(0)
    }), this.blankpopup.addChild(this.message), CWTween.from(this, .2, {
        x: this.percentageOfWidth(-1)
    }), CWTween.from(this.message, .2, {
        scaleX: 0,
        scaleY: 0
    }, {
        delay: .5,
        onComplete: this.firstCall.bind(this)
    })
}, InGameTutorial.prototype = {
    firstCall: function() {
        this.dealBtn.mouseEnabled = !1, this.betMaxBtn.mouseEnabled = !0, this.betMinBtn.mouseEnabled = !0, this.coinBtn.mouseEnabled = !0, this.topbg.addChild(this.coinBtn), this.topbg.addChild(this.coinGlow), this.topbg.addChild(this.betMaxBtn), this.topbg.addChild(this.betMinBtn), this.topbg.addChild(this.creditBg), this.topbg.addChild(this.blankpopup);
        var a = this.coinBtn.x,
            b = this.coinBtn.y - 80,
            c = this.betMaxBtn.x,
            d = this.betMaxBtn.y - 80,
            e = this.betMinBtn.x,
            f = this.betMinBtn.y - 80;
        this.hint1 = this.topbg.addChild((new TGE.Sprite).setup({
            image: "clickme",
            x: a,
            y: b
        })), this.hint2 = this.topbg.addChild((new TGE.Sprite).setup({
            image: "clickme",
            x: c,
            y: d
        })), this.hint3 = this.topbg.addChild((new TGE.Sprite).setup({
            image: "clickme",
            x: e,
            y: f
        })), this.hint1.scaleX = this.hint1.scaleY = .3, this.hint2.scaleX = this.hint2.scaleY = .3, this.hint3.scaleX = this.hint3.scaleY = .3, CWTween.from(this.hint1, .3, {
            y: b + 10
        }, {
            reverse: !0
        }), CWTween.from(this.hint2, .3, {
            y: d + 10
        }, {
            reverse: !0
        }), CWTween.from(this.hint3, .3, {
            y: f + 10
        }, {
            reverse: !0
        })
    },
    afterFirstCallAnimComplete: function() {
        this.hint1.markForRemoval(), this.hint2.markForRemoval(), this.hint3.markForRemoval(), this.message.text = "Click on DEAL button.", CWTween.to(this.message, .2, {
            scaleX: 1,
            scaleY: 1
        }, {
            onComplete: this.secondCall.bind(this)
        })
    },
    secondCall: function() {
        this.topbg.addChild(this.dealBtn), this.xIncrement = 0;
        for (var a = 0; a < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; a++) this.topbg.addChild(this.CardArray[a]), this.xIncrement += TGE.Game._sInstance.gameData.inGameData.cardsInformation.differenceBtnTwoCards;
        var b = this.dealBtn.x,
            c = this.dealBtn.y - 80;
        this.hint1 = this.topbg.addChild((new TGE.Sprite).setup({
            image: "clickme",
            x: b,
            y: c
        })), this.hint1.scaleX = this.hint1.scaleY = .3, CWTween.from(this.hint1, .3, {
            y: c + 10
        }, {
            reverse: !0
        })
    },
    afterSecondCallAnimComplete: function() {
        this.message.text = "锁定这两张牌 \n 获胜机率会大一些", this.message.scaleX = this.message.scaleY = 0, CWTween.to(this.message, .2, {
            scaleX: 1,
            scaleY: 1
        }, {
            delay: .5,
            onComplete: this.thirdCall.bind(this)
        })
    },
    thirdCall: function() {
        for (var a = 0; a < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; a++)(1 == a || 2 == a || 3 == a) && (this.topbg.removeChild(this.CardArray[a]), this.gameBackground.addChild(this.CardArray[a]))
    },
    afterThirdCallAnimComplete: function() {
        this.hint[0].markForRemoval(), this.hint[1].markForRemoval(), this.button_draw.mouseEnabled = !0, this.disableCard = !0, this.message.text = "点击DRAW 按钮 \n更换牌面 ", this.message.scaleX = this.message.scaleY = 0, CWTween.to(this.message, .2, {
            scaleX: 1,
            scaleY: 1
        }, {
            delay: .5,
            onComplete: this.fourthCall.bind(this)
        })
    },
    fourthCall: function() {
        this.topbg.addChild(this.button_draw)
    },
    betPlusFunction: function() {
        this.betCount < 3 && (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.betCount += 1, this.mBet.text = this.betCount, this.mCreditText.text = 19), this.addsBetButtonsToBackBg(), CWTween.to(this.message, .2, {
            scaleX: 0,
            scaleY: 0
        }, {
            onComplete: this.afterFirstCallAnimComplete.bind(this)
        }), this.buttonStatusAfterFirstTut()
    },
    betMaxFunction: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.betCount = 5, this.mBet.text = this.betCount, this.mCreditText.text = 15, this.addsBetButtonsToBackBg(), CWTween.to(this.message, .2, {
            scaleX: 0,
            scaleY: 0
        }, {
            onComplete: this.afterFirstCallAnimComplete.bind(this)
        }), this.buttonStatusAfterFirstTut()
    },
    betMinFunction: function() {
        TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.betCount = 1, this.mBet.text = this.betCount, this.mCreditText.text = 19, this.addsBetButtonsToBackBg(), CWTween.to(this.message, .2, {
            scaleX: 0,
            scaleY: 0
        }, {
            onComplete: this.afterFirstCallAnimComplete.bind(this)
        }), this.buttonStatusAfterFirstTut()
    },
    dealBtnFunction: function() {
        if (TGE.Game._sInstance.audioPlayer.playAudio("button", !1), this.betCount > 0) {
            for (var a = 0, b = this.CardArray.length; b > a; a++) this.CardArray[a].mouseEnabled = !0;
            this.RandomNoArray = [], TGE.Game._sInstance.audioPlayer.playAudio("card_flip", !1);
            for (var a = 0; a < TGE.Game._sInstance.gameData.inGameData.cardsInformation.totalNoOfCards; a++) this.RandomNoArray = [52, 16, 38, 24, 13], CWTween.to(this.CardArray[a], .1, {
                scaleX: 0
            }, {
                delay: .1,
                onComplete: this.displayCards.bind(this, a, "deal")
            }), 4 == a && (this.dealBtn.visible = !1, this.button_draw.visible = !0)
        }
    },
    hintFunction: function() {
        var a = this.CardArray[4].x,
            b = this.CardArray[4].y - 110;
        this.hint.push((new TGE.Sprite).setup({
            image: "clickme",
            x: a,
            y: b
        })), this.addChild(this.hint[0]), this.hint[0].scaleX = this.hint[0].scaleY = .3;
        var a = this.CardArray[0].x,
            b = this.CardArray[0].y - 110;
        this.hint.push((new TGE.Sprite).setup({
            image: "clickme",
            x: a,
            y: b
        })), this.addChild(this.hint[1]), this.hint[1].scaleX = this.hint[1].scaleY = .3, CWTween.from(this.hint[0], .3, {
            y: b + 10
        }, {
            reverse: !0
        }), CWTween.from(this.hint[1], .3, {
            y: b + 10
        }, {
            reverse: !0
        })
    },
    displayCards: function(a, b) {
        var c = this.cardDeckObj.getCardSuitRank(this.RandomNoArray[a]);
        this.CardArray[a].cardsuit = c.suit, this.CardArray[a].cardrank = c.rank, this.CardArray[a].cardcolor = c.color, this.CardArray[a].clicked = !1, this.CardArray[a].isLocked = !1, this.CardArray[a].lock = !1, this.CardArray[a].addEventListener("mousedown", this.cardClicked.bind(this, a)), this.CardArray[a].setImage(this.CardArray[a].cardrank + this.CardArray[a].cardsuit), this.addChild(this.CardArray[a]), "deal" == b ? (this.hint1.markForRemoval(), this.disableCard = !1, 4 == a ? (CWTween.to(this.CardArray[a], .1, {
            scaleX: 1
        }, {
            delay: .1,
            onComplete: this.hintFunction.bind(this)
        }), CWTween.to(this.message, .2, {
            scaleX: 0,
            scaleY: 0
        }, {
            onComplete: this.afterSecondCallAnimComplete.bind(this)
        })) : CWTween.to(this.CardArray[a], .1, {
            scaleX: 1
        }, {
            delay: .1
        })) : CWTween.to(this.CardArray[a], .1, {
            scaleX: 1
        }, {
            delay: .1
        })
    },
    cardClicked: function(a) {
        if (0 == this.disableCard) {
            if (0 == this.CardArray[a].clicked && (0 == a || 4 == a)) {
                this.clickedCardCounter++, this.CardArray[a].clicked = !0;
                var b = this.CardArray[a].x,
                    c = this.CardArray[a].y;
                this.CardArray[a].isLocked = this.addChild((new TGE.Sprite).setup({
                    image: "redBall",
                    x: b,
                    y: c
                })), this.CardArray[a].isLocked.alpha = .6, this.CardArray[a].lock = this.addChild((new TGE.Sprite).setup({
                    image: "lock",
                    x: b + 37,
                    y: c - 50
                })), CWTween.to(this.CardArray[a], .01, {
                    scaleX: .8,
                    scaleY: .8
                }, {
                    timeline: !0
                }), CWTween.to(this.CardArray[a], .01, {
                    scaleX: 1,
                    scaleY: 1
                }, {
                    timeline: !0
                }), TGE.Game._sInstance.audioPlayer.playAudio("lock1", !1)
            }
            2 == this.clickedCardCounter && CWTween.to(this.message, .2, {
                scaleX: 0,
                scaleY: 0
            }, {
                delay: .3,
                onComplete: this.afterThirdCallAnimComplete.bind(this)
            })
        }
    },
    drawFunction: function() {
        this.CardArray[0].isLocked.markForRemoval(), this.CardArray[0].lock.markForRemoval(), this.CardArray[4].isLocked.markForRemoval(), this.CardArray[4].lock.markForRemoval(), TGE.Game._sInstance.audioPlayer.playAudio("button", !1);
        for (var a = 0; 4 > a; a++) this.CardArray[a].clicked || (1 == a ? this.RandomNoArray[a] = 15 : 2 == a ? this.RandomNoArray[a] = 39 : 3 == a && (this.RandomNoArray[a] = 25), CWTween.to(this.CardArray[a], .1, {
            scaleX: 0
        }, {
            delay: .1,
            timeline: !0,
            onComplete: this.displayCards.bind(this, a, "draw")
        }), TGE.Game._sInstance.audioPlayer.playAudio("card_flip", !1));
        this.disableCard = !0, this.button_draw.mouseEnabled = !1, CWTween.to(this.message, .2, {
            scaleX: 0,
            scaleY: 0
        }, {
            delay: 1.5,
            onComplete: this.winningHand.bind(this)
        })
    },
    winningHand: function() {
        this.topbg.removeChild(this.button_draw), this.gameBackground.addChild(this.button_draw), glow1 = this.addChild((new TGE.Sprite).setup({
            image: "redBall",
            x: this.CardArray[0].x,
            y: this.CardArray[0].y
        })), glow2 = this.addChild((new TGE.Sprite).setup({
            image: "redBall",
            x: this.CardArray[2].x,
            y: this.CardArray[2].y
        })), glow3 = this.addChild((new TGE.Sprite).setup({
            image: "redBall",
            x: this.CardArray[4].x,
            y: this.CardArray[4].y
        })), this.winningHandText = (new TGE.Sprite).setup({
            image: TGE.Game._sInstance.gameData.inGameData.winningHandTextImages.threeOfAkind,
            x: this.percentageOfWidth(.5),
            y: this.percentageOfHeight(.4)
        }), this.addChild(this.winningHandText), this.winningHandText.scaleX = this.winningHandText.scaleY = 0, this.winningHandText.addChild((new TGE.MultilineText).setup({
            text: "漂亮！你赚到了！",
            font: "28px Market Deco",
            color: "#f9db15",
            x: this.percentageOfWidth(0),
            y: this.percentageOfHeight(-.15)
        })), CWTween.to(this.winningHandText, .5, {
            scaleX: 1,
            scaleY: 1
        }, {
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.delayInRemoveWinningText.bind(this)
        }), TGE.Game._sInstance.audioPlayer.playAudio("win01", !1)
    },
    delayInRemoveWinningText: function() {
        CWTween.to(this.winningHandText, .5, {
            scaleX: 0,
            scaleY: 0
        }, {
            delay: 1.5,
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.startLevelSelectionScreen.bind(this)
        })
    },
    startLevelSelectionScreen: function() {
        this.close(TGE.Game.prototype.PlayGame.bind(TGE.Game.GetInstance()))
    },
    addsBetButtonsToBackBg: function() {
        this.topbg.removeChild(this.coinBtn), this.topbg.removeChild(this.coinGlow), this.topbg.removeChild(this.betMaxBtn), this.topbg.removeChild(this.betMinBtn), this.gameBackground.addChild(this.coinBtn), this.gameBackground.addChild(this.coinGlow), this.gameBackground.addChild(this.betMaxBtn), this.gameBackground.addChild(this.betMinBtn)
    },
    buttonStatusAfterFirstTut: function() {
        this.coinBtn.mouseEnabled = !1, this.betMinBtn.mouseEnabled = !1, this.betMaxBtn.mouseEnabled = !1, this.dealBtn.mouseEnabled = !0
    }
}, extend(InGameTutorial, TGE.Window), WelcomeScreen = function(a, b) {
    WelcomeScreen.superclass.constructor.apply(this), this.setUp(), this.instruction = this.setup({
        x: a / 2,
        y: b / 2,
        image: "gameScreenBg"
    })
}, WelcomeScreen.prototype = {
    setUp: function() {
        this.background = (new TGE.Sprite).setup({
            image: "minigamePopup",
            x: 0,
            y: 0
        }), this.addChild(this.background), this.headingText = (new TGE.MultilineText).setup({
            text: "欢迎来到51逗乐德州扑克派对!",
            font: "35px Market Deco",
            color: "#f9db15",
            x: this.background.percentageOfWidth(0),
            y: this.background.percentageOfHeight(-.38)
        }), this.background.addChild(this.headingText), this.line1 = (new TGE.MultilineText).setup({
            text: "这是一个人机对战的德州扑克游戏！ \n 良好的发挥会提升级别！ \n在第一级别里会获得系统提示！ \n 通过玩一个小游戏 \n在第二级别里胜利的奖励会加倍 \n在第三级别中，你的手里会获得小王\n每天登陆可以获得20筹码！\n 你的牌会出现伟大的同花顺吗?\n祝你好运！",
            font: "25px Market Deco",
            color: "#f9db15",
            x: this.background.percentageOfWidth(.01),
            y: this.background.percentageOfHeight(-.28)
        }), this.background.addChild(this.line1), this.ok = (new TGE.Button).setup({
            image: "ok",
            x: this.background.percentageOfWidth(0),
            y: this.background.percentageOfHeight(.38),
            numStates: 1,
            pressFunction: this.onAnimationComplete.bind(this)
        }), this.background.addChild(this.ok), CWTween.from(this.background, .3, {
            scaleX: .4,
            scaleY: .4
        }, {
            ease: {
                name: "Back",
                type: "Out"
            }
        })
    },
    closeWelcomeScreen: function() {
        TGE.Game.GetInstance().showManagedScreen("tutorial"), this.markForRemoval()
    },
    onAnimationComplete: function() {
        this.ok.mouseEnabled = !1, TGE.Game._sInstance.audioPlayer.playAudio("button", !1), CWTween.to(this.background, .3, {
            scaleX: 0,
            scaleY: 0
        }, {
            ease: {
                name: "Back",
                type: "In"
            },
            onComplete: this.closeWelcomeScreen.bind(this)
        })
    }
}, extend(WelcomeScreen, TGE.Sprite), LevelBadgePopup = function(a, b, c) {
    LevelBadgePopup.superclass.constructor.apply(this, arguments), this.mouseEnabled = !0, this.ref = c, this.registrationX = this.registrationY = 0, this.setup({
        x: 0,
        y: 0,
        image: "bg_transperent"
    }), this.awardPopup = (new TGE.Sprite).setup({
        image: "minigamePopup",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    }), this.addChild(this.awardPopup), this.awardPopup.addChild((new TGE.Text).setup({
        text: "祝贺你!",
        font: "35px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-.25)
    })), this.awardPopup.addChild((new TGE.Text).setup({
        text: "你已经可以解锁等级 " + TGE.Game._sInstance.currentLevelNo,
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-.15)
    })), this.badge = (new TGE.Sprite).setup({
        image: "levelBadge" + (TGE.Game._sInstance.currentLevelNo - 1),
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(0)
    }), this.awardPopup.addChild(this.badge), CWTween.from(this.awardPopup, .8, {
        x: this.percentageOfHeight(-.5)
    }, {
        ease: {
            name: "Back",
            type: "Out"
        },
        onComplete: this.onAnimationComplete.bind(this)
    })
}, LevelBadgePopup.prototype = {
    onAnimationComplete: function() {
        CWTween.to(this.awardPopup, .8, {
            x: this.percentageOfHeight(-.5)
        }, {
            delay: 1.5,
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.closeBtnFunction.bind(this)
        })
    },
    closeBtnFunction: function() {
        this.markForRemoval()
    }
}, extend(LevelBadgePopup, TGE.Sprite), ChipsBadgePopup = function(a, b, c) {
    if (ChipsBadgePopup.superclass.constructor.apply(this, arguments), this.mouseEnabled = !0, this.ref = c, this.registrationX = this.registrationY = 0, this.setup({
        x: 0,
        y: 0,
        image: "bg_transperent"
    }), this.awardPopup = (new TGE.Sprite).setup({
        image: "minigamePopup",
        x: this.percentageOfWidth(.5),
        y: this.percentageOfHeight(.5)
    }), this.addChild(this.awardPopup), this.awardPopup.addChild((new TGE.Sprite).setup({
        image: "chipsBadge" + TGE.Game._sInstance.chipsBadgeCounter,
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(0)
    })), this.awardPopup.addChild((new TGE.Text).setup({
        text: "恭喜你 !",
        font: "35px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-.25)
    })), 1 == TGE.Game._sInstance.chipsBadgeCounter) var d = TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.OneThousandChips;
    else if (2 == TGE.Game._sInstance.chipsBadgeCounter) var d = TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.fiveThousandChips;
    else var d = TGE.Game._sInstance.gameData.inGameData.updateChipsBadgeData.tenThousandChips;
    this.text = (new TGE.Text).setup({
        text: "你已经实现了 " + d + " 筹码成就",
        font: "25px Market Deco",
        color: "#f9db15",
        x: this.percentageOfWidth(0),
        y: this.percentageOfHeight(-.15)
    }), this.awardPopup.addChild(this.text), CWTween.from(this.awardPopup, .8, {
        x: this.percentageOfHeight(-.5)
    }, {
        ease: {
            name: "Back",
            type: "Out"
        },
        onComplete: this.onAnimationComplete.bind(this)
    })
}, ChipsBadgePopup.prototype = {
    onAnimationComplete: function() {
        CWTween.to(this.awardPopup, .8, {
            x: this.percentageOfHeight(-.5)
        }, {
            delay: 1.5,
            ease: {
                name: "Back",
                type: "Out"
            },
            onComplete: this.closeBtnFunction.bind(this)
        })
    },
    closeBtnFunction: function() {
        this.markForRemoval()
    }
}, extend(ChipsBadgePopup, TGE.Sprite), TGE.AssetManager.SpriteSheets.Vp1 = {
    BadgeChips1: [620, 695, 307, 229],
    BadgeChips2: [620, 464, 307, 229],
    BadgeChips3: [620, 233, 307, 229],
    BadgeLevel1: [620, 2, 307, 229],
    BadgeLevel2: [311, 695, 307, 229],
    BadgeLevel3: [311, 464, 307, 229],
    Next_BTN: [139, 926, 135, 76],
    Star_a: [858, 992, 17, 17],
    Star_b: [839, 992, 17, 17],
    Star_c: [912, 991, 17, 17],
    back: [2, 926, 135, 76],
    badgesWithGlow: [929, 197, 67, 63],
    buyWithGlow: [728, 926, 109, 66],
    chipsBadge1: [311, 233, 307, 229],
    chipsBadge2: [311, 2, 307, 229],
    chipsBadge3: [2, 695, 307, 229],
    close: [839, 926, 71, 64],
    fiveOfAkindStar: [929, 846, 50, 50],
    flushStar: [929, 794, 50, 50],
    fourOfAkindStar: [929, 742, 50, 50],
    fullHouseStar: [929, 690, 50, 50],
    help: [929, 132, 67, 63],
    homebtn: [929, 67, 67, 63],
    levelBadge1: [2, 464, 307, 229],
    levelBadge2: [2, 233, 307, 229],
    levelBadge3: [2, 2, 307, 229],
    lock: [929, 262, 54, 62],
    mute: [929, 2, 67, 63],
    nobtn: [617, 926, 109, 66],
    ok: [506, 926, 109, 66],
    pairOfJackOrMoreStar: [929, 638, 50, 50],
    playWithGlow: [276, 926, 117, 73],
    royalFlushStar: [929, 586, 50, 50],
    straightFlushStar: [929, 534, 50, 50],
    straightStar: [929, 482, 50, 50],
    threeOfAkindStar: [929, 430, 50, 50],
    twoPairStar: [929, 378, 50, 50],
    unMute: [912, 926, 67, 63],
    wildroyalflushStar: [929, 326, 50, 50],
    yesbtn: [395, 926, 109, 66]
}, TGE.AssetManager.SpriteSheets.Vp2 = {
    buyMoreChipsGlow: [2, 793, 560, 79],
    flush: [538, 878, 245, 122],
    fullhouse: [556, 205, 440, 122],
    instructions: [582, 660, 374, 90],
    instructions3: [2, 2, 552, 225],
    instructions4: [2, 229, 519, 258],
    level3Unlocked: [2, 874, 534, 94],
    menu: [785, 878, 172, 94],
    menuText: [2, 712, 560, 79],
    straight: [564, 752, 373, 124],
    straightflush: [621, 457, 373, 201],
    threeofakind: [556, 2, 396, 201],
    twopairs: [523, 329, 430, 126],
    unlockLevel: [2, 613, 578, 97],
    upperTabsForMenu: [2, 489, 617, 122],
    winparticle: [2, 970, 50, 50],
    wintextstar: [954, 2, 50, 50]
}, TGE.AssetManager.SpriteSheets.Vp3 = {
    "1Clubs": [469, 832, 122, 175],
    "1Diamonds": [786, 732, 122, 175],
    "1Hearts": [126, 660, 122, 175],
    "1Spades": [2, 660, 122, 175],
    "2Clubs": [374, 559, 122, 175],
    "2Diamonds": [250, 559, 122, 175],
    "2Hearts": [126, 483, 122, 175],
    "2Spades": [2, 483, 122, 175],
    "3Clubs": [500, 408, 122, 175],
    Outerglow: [691, 282, 307, 229],
    fiveofakind: [293, 205, 396, 201],
    fourofakind: [293, 2, 396, 201],
    jacksorbetter: [2, 2, 289, 278],
    level2Unlocked: [250, 736, 534, 94],
    light1: [498, 585, 465, 145],
    light2: [2, 837, 465, 145],
    logocodewalla: [593, 832, 134, 41],
    logotresensa: [624, 408, 65, 100],
    partyText: [624, 513, 319, 65],
    playSplash: [283, 408, 215, 149],
    royalflush: [2, 282, 279, 199],
    star1_1: [910, 833, 89, 99],
    star1_2: [910, 732, 89, 99],
    star2_1: [682, 875, 87, 85],
    star2_2: [593, 909, 87, 85],
    wildroyalflush: [691, 2, 279, 278]
}, TGE.AssetManager.SpriteSheets.Vp4 = {
    "10Clubs": [870, 710, 122, 175],
    "10Diamonds": [746, 710, 122, 175],
    "10Hearts": [870, 533, 122, 175],
    "10Spades": [746, 533, 122, 175],
    "11Clubs": [622, 710, 122, 175],
    "11Diamonds": [622, 533, 122, 175],
    "11Hearts": [498, 710, 122, 175],
    "11Spades": [498, 533, 122, 175],
    "12Clubs": [870, 356, 122, 175],
    "12Diamonds": [746, 356, 122, 175],
    "12Hearts": [622, 356, 122, 175],
    "12Spades": [498, 356, 122, 175],
    "13Clubs": [374, 710, 122, 175],
    "3Diamonds": [374, 533, 122, 175],
    "3Hearts": [374, 356, 122, 175],
    "3Spades": [870, 179, 122, 175],
    "4Clubs": [746, 179, 122, 175],
    "4Diamonds": [622, 179, 122, 175],
    "4Hearts": [498, 179, 122, 175],
    "4Spades": [374, 179, 122, 175],
    "5Clubs": [250, 710, 122, 175],
    "5Diamonds": [250, 533, 122, 175],
    "5Hearts": [250, 356, 122, 175],
    "5Spades": [250, 179, 122, 175],
    "6Clubs": [126, 710, 122, 175],
    "6Diamonds": [126, 533, 122, 175],
    "6Hearts": [126, 356, 122, 175],
    "6Spades": [126, 179, 122, 175],
    "7Clubs": [870, 2, 122, 175],
    "7Diamonds": [746, 2, 122, 175],
    "7Hearts": [622, 2, 122, 175],
    "7Spades": [498, 2, 122, 175],
    "8Clubs": [374, 2, 122, 175],
    "8Diamonds": [250, 2, 122, 175],
    "8Hearts": [126, 2, 122, 175],
    "8Spades": [2, 710, 122, 175],
    "9Clubs": [2, 533, 122, 175],
    "9Diamonds": [2, 356, 122, 175],
    "9Hearts": [2, 179, 122, 175],
    "9Spades": [2, 2, 122, 175]
}, TGE.AssetManager.SpriteSheets.Vp5 = {
    "13Diamonds": [705, 734, 122, 175],
    "13Hearts": [841, 591, 122, 175],
    "13Spades": [581, 706, 122, 175],
    "53Joker": [717, 557, 122, 175],
    betMaxBtn: [626, 256, 148, 99],
    betMinBtn: [776, 311, 144, 101],
    black: [777, 208, 149, 101],
    button_draw: [626, 153, 149, 101],
    cardBackground: [867, 414, 122, 175],
    clickme: [583, 552, 132, 152],
    coin1: [230, 904, 112, 111],
    coin10: [116, 904, 112, 111],
    coin25: [2, 904, 112, 111],
    coinGlow: [725, 414, 140, 141],
    dealBtn: [861, 105, 149, 101],
    downBg: [2, 2, 640, 113],
    instructions1: [2, 313, 579, 293],
    instructions2: [2, 608, 577, 294],
    playSplash: [644, 2, 215, 149],
    red: [861, 2, 149, 101],
    redBall: [583, 357, 140, 193],
    smallPopup: [2, 117, 622, 194]
}, SparkleEffect = function(a, b, c, d) {
    SparkleEffect.superclass.constructor.call(this), this.particles = [], this.initGrid = !0, this.done = !1, this.velocity = d, this.xPos = a, this.yPos = b, this.imagePath = c, this.elementToBeRemoved = [], this.isRemoved = !1, this.sparkleCount = 0, this.elapsedTime = 0
}, SparkleEffect.prototype = {
    _drawClass: function(a) {
        if (this.isRemoved) return this.particles = null, this.initGrid = null, this.done = null, this.xPos = null, this.yPos = null, this.imagePath = null, this.elementToBeRemoved = null, this.visible = !1, void 0;
        this.initGrid && (this.initGrid = !1, this.createParticle()), ++this.elapsedTime % 20 == 0 && (this.sparkleCount++, this.sparkleCount < 3 && (this.done = !1), this.createParticle());
        var b = this.particles.length;
        if (0 >= b && this.done) return this.isRemoved = !0, void 0;
        for (; b--;) {
            var c = this.particles[b];
            c.update() && (this.elementToBeRemoved.push(b), c.usePhysics || this.done || (this.done = !0, FireworkExplosions1.circle(c, this, this.velocity))), c.render(a, this)
        }
        if (this.elementToBeRemoved.length > 0) {
            b = this.elementToBeRemoved.length;
            for (var d = 0; b > d; ++d) c = this.particles[this.elementToBeRemoved[d]], this.particles.splice(this.elementToBeRemoved[d], 1);
            this.elementToBeRemoved.splice(0, this.elementToBeRemoved.length)
        }
    },
    createParticle: function(a, b, c, d, e) {
        a = a || {}, b = b || {}, c = c || {}, this.particles.push(new Particle1({
            x: a.x || this.xPos,
            y: a.y || this.yPos + 10
        }, {
            y: b.y || this.yPos
        }, {
            x: c.x || 2e-4 * Math.random() - 1e-4,
            y: c.y || 0
        }, d || 12 * Math.floor(100 * Math.random()), e))
    }
}, extend(SparkleEffect, TGE.DisplayObjectContainer);
var FireworkExplosions1 = {
        circle: function(a, b, c) {
            for (var d = 70, e = 2 * Math.PI / d, f = d, g = 1; d--;) {
                var h = c + 12 * Math.random(),
                    i = d * e;
                f += g, b.createParticle(a.pos, null, {
                    x: Math.cos(i) * h,
                    y: Math.sin(i) * h
                }, a.color, !0)
            }
        }
    },
    Particle1 = function(a, b, c, d, e) {
        this.GRAVITY = .06, this.alpha = 1, this.easing = .02 * Math.random(), this.fade = .08 * Math.random() + .02, this.gridX = d % 120, this.gridY = 12 * Math.floor(d / 120), this.color = d, this.pos = {
            x: a.x || 0,
            y: a.y || 0
        }, this.vel = {
            x: c.x || 0,
            y: c.y || 0
        }, this.lastPos = {
            x: this.pos.x,
            y: this.pos.y
        }, this.target = {
            y: b.y || 0
        }, this.usePhysics = e || !1
    };
Particle1.prototype = {
    update: function() {
        if (this.lastPos.x = this.pos.x, this.lastPos.y = this.pos.y, this.usePhysics) this.vel.y += this.GRAVITY, this.pos.y += this.vel.y, this.alpha -= this.fade;
        else {
            var a = this.target.y - this.pos.y;
            this.pos.y += a * (.03 + this.easing), this.alpha = Math.min(a * a * 5e-5, 1)
        }
        return this.pos.x += this.vel.x, this.alpha < .005
    },
    render: function(a, b) {
        if (null != a) {
            var c = Math.round(this.pos.x),
                d = Math.round(this.pos.y);
            a.globalAlpha = Math.random() * (this.alpha + 1), a.drawImage(TGE.AssetManager.GetImage(b.imagePath), c - 3, d - 3)
        }
    }
};
var CWTween = {
    mTweenObjects: [],
    mPlaying: !1,
    mPauseTime: 0,
    pause: function(a) {
        if (a) 0 == this.mPauseTime && (this.mPauseTime = Date.now());
        else if (0 != this.mPauseTime) {
            var b = Date.now() - this.mPauseTime;
            for (var c in this.mTweenObjects) this.mTweenObjects[c]._startTime += b;
            this.mPauseTime = 0, this.mPlaying || requestAnimationFrame(this.updateFunction.bind(this))
        }
    },
    removeAll: function() {
        for (var a = this.mTweenObjects.length, b = 0; a > b; b++) this.mTweenObjects.splice(b, 1), b--
    },
    remove: function(a) {
        for (var b = this.mTweenObjects.length, c = 0; b > c; c++)
            if (this.mTweenObjects[c]._targetObj == a) return this.mTweenObjects.splice(c, 1), void 0
    },
    AddAnimationSequence: function(a, b, c, d, e) {
        for (var f = this.mTweenObjects.length, g = 0; f > g; g++)
            if (this.mTweenObjects[g]._targetObj == a) return this.mTweenObjects[g].hasOwnProperty("mSequenceArr") ? this.mTweenObjects[g].mSequenceArr.push({
                duration: b,
                animData: c,
                properties: d,
                isFrom: e
            }) : (this.mTweenObjects[g].mSequenceArr = [], this.mTweenObjects[g].mSequenceArr.push({
                duration: b,
                animData: c,
                properties: d,
                isFrom: e
            })), void 0;
        this.CreateTweenObjectData({}, a, b, c, d, e)
    },
    to: function(a, b, c, d) {
        d && d.timeline ? this.AddAnimationSequence(a, b, c, d, !1) : (this.remove(a), this.CreateTweenObjectData({}, a, b, c, d, !1)), this.mPlaying || 0 !== this.mPauseTime || (requestAnimationFrame(this.updateFunction.bind(this)), this.mPlaying = !0)
    },
    from: function(a, b, c, d) {
        d && d.timeline ? this.AddAnimationSequence(a, b, c, d, !0) : (this.remove(a), this.CreateTweenObjectData({}, a, b, c, d, !0)), this.mPlaying || 0 !== this.mPauseTime || (requestAnimationFrame(this.updateFunction.bind(this)), this.mPlaying = !0)
    },
    CreateTweenObjectData: function(a, b, c, d, e, f, g) {
        if (a._targetObj = b, a._duration = 1e3 * c, a._startTime = Date.now(), a._Data = {}, f)
            for (var h in d) null !== d[h] && (a._Data[h] = [d[h], b[h]], b[h] = d[h]);
        else
            for (var h in d) null !== d[h] && (a._Data[h] = [b[h], d[h]]);
        e && (e.hasOwnProperty("onComplete") && (a._callback = e.onComplete), e.hasOwnProperty("ease") && (a._easeFunction = CWTween.Easing[e.ease.name][e.ease.hasOwnProperty("type") ? e.ease.type : "In"], a._easeParam = this.ParseEasingValues(e.ease)), e.hasOwnProperty("delay") && (a._delay = 1e3 * e.delay), e.hasOwnProperty("reverse") && (a._reverse = e.reverse)), g || this.mTweenObjects.push(a)
    },
    updateFunction: function() {
        if (this.mTweenObjects.length > 0 && 0 == this.mPauseTime) {
            requestAnimationFrame(this.updateFunction.bind(this));
            for (var a, b, c, d = Date.now(), e = 0; e < this.mTweenObjects.length; e++)
                if (b = this.mTweenObjects[e], 1 == b._targetObj.markedForRemoval()) this.mTweenObjects.splice(e, 1);
                else if (b.hasOwnProperty("_delay")) a = (d - b._startTime) / b._delay, a >= 1 && (delete b._delay, b._startTime = Date.now());
            else {
                a = (d - b._startTime) / b._duration, c = a >= 1 ? a = 1 : b.hasOwnProperty("_easeFunction") ? b._easeFunction(a, b._easeParam) : a;
                for (var f in b._Data) b._targetObj[f] = b._Data[f][0] + (b._Data[f][1] - b._Data[f][0]) * c;
                if (1 == a)
                    if (b.hasOwnProperty("_reverse")) {
                        var g;
                        if (b._reverse === !0) {
                            for (var f in b._Data) g = b._Data[f][0], b._Data[f][0] = b._Data[f][1], b._Data[f][1] = g;
                            b._startTime = Date.now()
                        } else if (b._reverse <= 0) delete b._reverse;
                        else {
                            b._reverse--;
                            for (var f in b._Data) g = b._Data[f][0], b._Data[f][0] = b._Data[f][1], b._Data[f][1] = g;
                            b._startTime = Date.now()
                        }
                    } else if (b.hasOwnProperty("mSequenceArr")) {
                    var h = b.mSequenceArr.length;
                    if (0 == h) this.mTweenObjects.splice(e, 1), e--, b.hasOwnProperty("_callback") && b._callback();
                    else {
                        this.RemoveObjectProperty(b);
                        var i = b.mSequenceArr[0];
                        this.CreateTweenObjectData(b, b._targetObj, i.duration, i.animData, i.properties, i.isFrom, !0), b.mSequenceArr.splice(0, 1)
                    }
                } else this.mTweenObjects.splice(e, 1), e--, b.hasOwnProperty("_callback") && b._callback()
            }
        } else this.mPlaying = !1
    },
    RemoveObjectProperty: function(a) {
        a.hasOwnProperty("_callback") && (a._callback(), delete a._callback), a.hasOwnProperty("ease") && delete a.ease, a.hasOwnProperty("delay") && delete a.delay, a.hasOwnProperty("reverse") && delete a.reverse
    },
    ParseEasingValues: function(a) {
        var b;
        switch (a.name) {
            case "Back":
                b = a.hasOwnProperty("params") ? a.params : 1.70158;
                break;
            case "Elastic":
                b = a.hasOwnProperty("params") ? a.params : 1;
                break;
            default:
                b = 0
        }
        return b
    }
};
CWTween.Easing = {
    Back: {
        In: function(a, b) {
            return a * a * ((b + 1) * a - b)
        },
        Out: function(a, b) {
            return (a -= 1) * a * ((b + 1) * a + b) + 1
        },
        InOut: function(a, b) {
            var c = 1.525 * b;
            return (a *= 2) < 1 ? .5 * a * a * ((c + 1) * a - c) : .5 * ((a -= 2) * a * ((c + 1) * a + c) + 2)
        }
    },
    Bounce: {
        In: function(a) {
            return 1 - CWTween.Easing.Bounce.Out(1 - a)
        },
        Out: function(a) {
            return 1 / 2.75 > a ? 7.5625 * a * a : 2 / 2.75 > a ? 7.5625 * (a -= 1.5 / 2.75) * a + .75 : 2.5 / 2.75 > a ? 7.5625 * (a -= 2.25 / 2.75) * a + .9375 : 7.5625 * (a -= 2.625 / 2.75) * a + .984375
        },
        InOut: function(a) {
            return .5 > a ? .5 * CWTween.Easing.Bounce.In(2 * a) : .5 * CWTween.Easing.Bounce.Out(2 * a - 1) + .5
        }
    },
    Elastic: {
        In: function(a, b) {
            return -(b * Math.pow(2, 10 * (a -= 1)) * Math.sin(2 * (a - .3 / (2 * Math.PI) * (Math.asin(1 / b) || 0)) * Math.PI / .3))
        },
        Out: function(a, b) {
            return b * Math.pow(2, -10 * a) * Math.sin(2 * (a - .3 / (2 * Math.PI) * (Math.asin(1 / b) || 0)) * Math.PI / .3) + 1
        },
        InOut: function(a, b) {
            var c = .3 / (2 * Math.PI) * (Math.asin(1 / b) || 0),
                d = 2 * Math.PI;
            return (a *= 2) < 1 ? -.5 * b * Math.pow(2, 10 * (a -= 1)) * Math.sin((a - c) * d / .45) : b * Math.pow(2, -10 * (a -= 1)) * Math.sin((a - c) * d / .45) * .5 + 1
        }
    },
    Expo: {
        In: function(a) {
            return Math.pow(2, 10 * (a - 1)) - .001
        },
        Out: function(a) {
            return 1 - Math.pow(2, -10 * a)
        },
        InOut: function(a) {
            return (a *= 2) < 1 ? .5 * Math.pow(2, 10 * (a - 1)) : .5 * (2 - Math.pow(2, -10 * (a - 1)))
        }
    },
    Sine: {
        In: function(a) {
            return 1 - Math.cos(a * Math.PI / 2)
        },
        Out: function(a) {
            return Math.sin(a * Math.PI / 2)
        },
        InOut: function(a) {
            return .5 * (1 - Math.cos(Math.PI * a))
        }
    },
    Linear: {
        None: function(a) {
            return a
        }
    },
    Quadratic: {
        In: function(a) {
            return a * a
        },
        Out: function(a) {
            return a * (2 - a)
        },
        InOut: function(a) {
            return (a *= 2) < 1 ? .5 * a * a : -.5 * (--a * (a - 2) - 1)
        }
    },
    Cubic: {
        In: function(a) {
            return a * a * a
        },
        Out: function(a) {
            return --a * a * a + 1
        },
        InOut: function(a) {
            return (a *= 2) < 1 ? .5 * a * a * a : .5 * ((a -= 2) * a * a + 2)
        }
    },
    Quartic: {
        In: function(a) {
            return a * a * a * a
        },
        Out: function(a) {
            return 1 - --a * a * a * a
        },
        InOut: function(a) {
            return (a *= 2) < 1 ? .5 * a * a * a * a : -.5 * ((a -= 2) * a * a * a - 2)
        }
    },
    Quintic: {
        In: function(a) {
            return a * a * a * a * a
        },
        Out: function(a) {
            return --a * a * a * a * a + 1
        },
        InOut: function(a) {
            return (a *= 2) < 1 ? .5 * a * a * a * a * a : .5 * ((a -= 2) * a * a * a * a + 2)
        }
    },
    Circ: {
        In: function(a) {
            return 1 - Math.sqrt(1 - a * a)
        },
        Out: function(a) {
            return Math.sqrt(1 - --a * a)
        },
        InOut: function(a) {
            return (a *= 2) < 1 ? -.5 * (Math.sqrt(1 - a * a) - 1) : .5 * (Math.sqrt(1 - (a -= 2) * a) + 1)
        }
    }
};
var CWFireWorksEffect = function(a, b, c, d) {
    return CWFireWorksEffect.superclass.constructor.call(this), this.particles = [], this.x = a, this.y = b, this.elapsedTime = 0, this.deviceElapsedTime = 20, this.imageArr = c, this.speed = d ? d : 50, this.addEventListener("update", this.Update.bind(this)), this
};
CWFireWorksEffect.prototype = {
    Update: function(a) {
        this.deviceElapsedTime = a.elapsedTime
    },
    _drawClass: function(a) {
        this.elapsedTime += this.deviceElapsedTime * this.speed, this.elapsedTime > 40 && (this.elapsedTime = 0, this.createParticle());
        for (var b = this.particles.length; b--;) {
            var c = this.particles[b];
            c.deviceElapsedTime = this.deviceElapsedTime * this.speed, c.update() && (this.particles.splice(b, 1), c.usePhysics || (Math.random() < .8 ? FireworkExplosions.star(c, this) : FireworkExplosions.circle(c, this))), c.render(a, c.image)
        }
    },
    createParticle: function(a, b, c, d, e, f) {
        var g = 640,
            h = 832;
        a = a || {}, b = b || {}, c = c || {}, f || (f = TGE.AssetManager.GetImage(this.imageArr[Math.floor(Math.random() * this.imageArr.length)])), this.particles.push(new Particle({
            x: a.x || .5 * g,
            y: a.y || h + 10
        }, {
            y: b.y || 150 + 100 * Math.random()
        }, {
            x: c.x || 3 * Math.random() - 1.5,
            y: c.y || 0
        }, d || 12 * Math.floor(100 * Math.random()), e, f))
    }
}, extend(CWFireWorksEffect, TGE.DisplayObjectContainer);
var FireworkExplosions = {
        circle: function(a, b) {
            for (var c = TGE.AssetManager.GetImage(b.imageArr[Math.floor(Math.random() * b.imageArr.length)]), d = 25, e = 2 * Math.PI / d; d--;) {
                var f = 4 + 4 * Math.random(),
                    g = d * e;
                b.createParticle(a.pos, null, {
                    x: Math.cos(g) * f,
                    y: Math.sin(g) * f
                }, a.color, !0, c)
            }
        },
        star: function(a, b) {
            var c = TGE.AssetManager.GetImage(b.imageArr[Math.floor(Math.random() * b.imageArr.length)]),
                d = 6 + Math.round(15 * Math.random()),
                e = 3 + Math.round(7 * Math.random()),
                f = 10,
                g = 80,
                h = -(3 * Math.random() - 6),
                i = 0,
                j = 0,
                k = 2 * Math.PI,
                l = Math.random() * k;
            do {
                i = j, j = (j + e) % d;
                for (var m = i / d * k - l, n = (i + e) / d * k - l, o = {
                    x: a.pos.x + Math.cos(m) * g,
                    y: a.pos.y + Math.sin(m) * g
                }, p = {
                    x: a.pos.x + Math.cos(n) * g,
                    y: a.pos.y + Math.sin(n) * g
                }, q = {
                    x: p.x - o.x,
                    y: p.y - o.y,
                    a: n - m
                }, r = 0; f > r; r++) {
                    var s = r / f,
                        t = m + s * q.a;
                    b.createParticle({
                        x: o.x + s * q.x,
                        y: o.y + s * q.y
                    }, null, {
                        x: Math.cos(t) * h,
                        y: Math.sin(t) * h
                    }, a.color, !0, c)
                }
            } while (0 !== j)
        }
    },
    Particle = function(a, b, c, d, e, f) {
        this.image = f, this.GRAVITY = .06, this.alpha = 1, this.easing = .02 * Math.random(), this.fade = .1 * Math.random(), this.gridX = d % 120, this.gridY = 12 * Math.floor(d / 120), this.color = d, this.pos = {
            x: a.x || 0,
            y: a.y || 0
        }, this.vel = {
            x: c.x || 0,
            y: c.y || 0
        }, this.lastPos = {
            x: this.pos.x,
            y: this.pos.y
        }, this.target = {
            y: b.y || 0
        }, this.usePhysics = e || !1
    };
Particle.prototype = {
    update: function() {
        if (this.lastPos.x = this.pos.x, this.lastPos.y = this.pos.y, this.usePhysics) this.vel.y += this.GRAVITY * this.deviceElapsedTime, this.pos.y += this.vel.y * this.deviceElapsedTime, this.alpha -= this.fade * this.deviceElapsedTime;
        else {
            var a = this.target.y - this.pos.y;
            this.pos.y += a * (.03 + this.easing) * this.deviceElapsedTime, this.alpha = Math.min(a * a * 5e-5, 1)
        }
        return this.pos.x += this.vel.x * this.deviceElapsedTime, this.alpha < .001
    },
    render: function(a, b) {
        {
            var c = Math.round(this.pos.x),
                d = Math.round(this.pos.y); - 5 * (c - this.lastPos.x), -5 * (d - this.lastPos.y)
        }
        a.drawImage(b, c - 3, d - 3)
    }
}, TGE.MultilineText = function() {
    return TGE.MultilineText.superclass.constructor.call(this), this.text = "", this.font = "12px Arial", this.hAlign = "center", this.vAlign = "middle", this.textColor = "#000", this.textShadow = "0px 0px 0px rgba(255, 255, 255, 1)", this.registrationX = .5 * this.width, this.registrationY = .5 * this.height, this._mPreviousText = null, this._mPreviousFont = null, this
}, TGE.MultilineText.prototype = {
    setup: function(a) {
        return TGE.MultilineText.superclass.setup.call(this, a), "string" == typeof a.text ? this.text = a.text : null, "string" == typeof a.font ? this.font = a.font : null, "string" == typeof a.hAlign ? this.hAlign = a.hAlign : null, "string" == typeof a.vAlign ? this.vAlign = a.vAlign : null, "string" == typeof a.color ? this.textColor = a.color : null, this.textArray = a.text.split("\n"), this
    },
    _calculateDimensions: function(a) {
        a.save(), a.font = this.font;
        var b = a.measureText(this.text);
        this.width = b.width;
        try {
            var c = this.font.indexOf("px"),
                d = this.font.substring(0, c).replace(/[^\d.]/g, "");
            this.height = parseInt(d, 10), this.height += this.height / 4 >> 0
        } catch (e) {
            this.height = 30
        }
        a.restore()
    },
    _drawClass: function(a) {
        if (null !== this.text) {
            (this._mPreviousText !== this.text || this._mPreviousFont !== this.font) && (this.textArray = this.text.split("\n"), this._mPreviousText = this.text, this._mPreviousFont = this.font, this._calculateDimensions(a)), a.font = null !== this.font ? this.font : "Arial", a.textAlign = null !== this.hAlign ? this.hAlign : "center", a.textBaseline = null !== this.vAlign ? this.vAlign : "middle", a.fillStyle = null !== this.textColor ? this.textColor : "#000", this.setShadow(a);
            var b = 0;
            for (var c in this.textArray) a.fillText(this.textArray[c], 0, b), b += this.height
        }
    },
    setShadow: function(a) {
        a.shadowColor = "black", a.shadowOffsetX = 2, a.shadowOffsetY = 2, a.shadowBlur = !0
    }
}, extend(TGE.MultilineText, TGE.DisplayObjectContainer);